
Lab3_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f28  08002f28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f28  08002f28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f28  08002f28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f28  08002f28  00012f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08002f3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002f3c  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f2b  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018be  00000000  00000000  00028fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  0002a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000600  00000000  00000000  0002b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016510  00000000  00000000  0002b640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000945a  00000000  00000000  00041b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080d1b  00000000  00000000  0004afaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f40  00000000  00000000  000cbcc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000cdc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002edc 	.word	0x08002edc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002edc 	.word	0x08002edc

0800014c <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
	  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, receivedData) == HAL_OK)
 8000154:	4b15      	ldr	r3, [pc, #84]	; (80001ac <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000156:	4a16      	ldr	r2, [pc, #88]	; (80001b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000158:	2100      	movs	r1, #0
 800015a:	6878      	ldr	r0, [r7, #4]
 800015c:	f000 fe3b 	bl	8000dd6 <HAL_CAN_GetRxMessage>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d11e      	bne.n	80001a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
	  {

		  //receive data from ECU
		  if (rxHeader.StdId == 0x7A2)
 8000166:	4b12      	ldr	r3, [pc, #72]	; (80001b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	f240 72a2 	movw	r2, #1954	; 0x7a2
 800016e:	4293      	cmp	r3, r2
 8000170:	d118      	bne.n	80001a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		  {
		        for (int i = 0; i < rxHeader.DLC; i++)
 8000172:	2300      	movs	r3, #0
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	e00b      	b.n	8000190 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
		        {
		            rxBuffer[i] = receivedData[i];
 8000178:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	4413      	add	r3, r2
 800017e:	7819      	ldrb	r1, [r3, #0]
 8000180:	4a0c      	ldr	r2, [pc, #48]	; (80001b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	4413      	add	r3, r2
 8000186:	460a      	mov	r2, r1
 8000188:	701a      	strb	r2, [r3, #0]
		        for (int i = 0; i < rxHeader.DLC; i++)
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	3301      	adds	r3, #1
 800018e:	60fb      	str	r3, [r7, #12]
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000192:	691a      	ldr	r2, [r3, #16]
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	429a      	cmp	r2, r3
 8000198:	d8ee      	bhi.n	8000178 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
		        }

		        HAL_UART_Transmit_IT(&huart1, rxBuffer,sizeof (rxBuffer));
 800019a:	2208      	movs	r2, #8
 800019c:	4905      	ldr	r1, [pc, #20]	; (80001b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800019e:	4806      	ldr	r0, [pc, #24]	; (80001b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80001a0:	f002 f958 	bl	8002454 <HAL_UART_Transmit_IT>
		  }
	  }
}
 80001a4:	bf00      	nop
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	200000f8 	.word	0x200000f8
 80001b0:	200000dc 	.word	0x200000dc
 80001b4:	20000100 	.word	0x20000100
 80001b8:	20000050 	.word	0x20000050

080001bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	canfil.FilterBank = 10;
 80001c2:	4b33      	ldr	r3, [pc, #204]	; (8000290 <main+0xd4>)
 80001c4:	220a      	movs	r2, #10
 80001c6:	615a      	str	r2, [r3, #20]
	canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80001c8:	4b31      	ldr	r3, [pc, #196]	; (8000290 <main+0xd4>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	619a      	str	r2, [r3, #24]
	canfil.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001ce:	4b30      	ldr	r3, [pc, #192]	; (8000290 <main+0xd4>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	611a      	str	r2, [r3, #16]
	canfil.FilterIdHigh = 0x712<<5;
 80001d4:	4b2e      	ldr	r3, [pc, #184]	; (8000290 <main+0xd4>)
 80001d6:	f24e 2240 	movw	r2, #57920	; 0xe240
 80001da:	601a      	str	r2, [r3, #0]
	canfil.FilterIdLow = 0;
 80001dc:	4b2c      	ldr	r3, [pc, #176]	; (8000290 <main+0xd4>)
 80001de:	2200      	movs	r2, #0
 80001e0:	605a      	str	r2, [r3, #4]
	canfil.FilterMaskIdHigh = 0x712<<5;
 80001e2:	4b2b      	ldr	r3, [pc, #172]	; (8000290 <main+0xd4>)
 80001e4:	f24e 2240 	movw	r2, #57920	; 0xe240
 80001e8:	609a      	str	r2, [r3, #8]
	canfil.FilterMaskIdLow = 0x0000;
 80001ea:	4b29      	ldr	r3, [pc, #164]	; (8000290 <main+0xd4>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	60da      	str	r2, [r3, #12]
	canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 80001f0:	4b27      	ldr	r3, [pc, #156]	; (8000290 <main+0xd4>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	61da      	str	r2, [r3, #28]
	canfil.FilterActivation = CAN_FILTER_ENABLE;
 80001f6:	4b26      	ldr	r3, [pc, #152]	; (8000290 <main+0xd4>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	621a      	str	r2, [r3, #32]
	canfil.SlaveStartFilterBank = 0;
 80001fc:	4b24      	ldr	r3, [pc, #144]	; (8000290 <main+0xd4>)
 80001fe:	2200      	movs	r2, #0
 8000200:	625a      	str	r2, [r3, #36]	; 0x24

	TxHeader.ExtId = 0;
 8000202:	4b24      	ldr	r3, [pc, #144]	; (8000294 <main+0xd8>)
 8000204:	2200      	movs	r2, #0
 8000206:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8000208:	4b22      	ldr	r3, [pc, #136]	; (8000294 <main+0xd8>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 0x712;
 800020e:	4b21      	ldr	r3, [pc, #132]	; (8000294 <main+0xd8>)
 8000210:	f240 7212 	movw	r2, #1810	; 0x712
 8000214:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000216:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <main+0xd8>)
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 800021c:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <main+0xd8>)
 800021e:	2208      	movs	r2, #8
 8000220:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000222:	4b1c      	ldr	r3, [pc, #112]	; (8000294 <main+0xd8>)
 8000224:	2200      	movs	r2, #0
 8000226:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fa78 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f83e 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f8e2 	bl	80003f8 <MX_GPIO_Init>
  MX_CAN_Init();
 8000234:	f000 f880 	bl	8000338 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f8b4 	bl	80003a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_ConfigFilter(&hcan,&canfil);
 800023c:	4914      	ldr	r1, [pc, #80]	; (8000290 <main+0xd4>)
 800023e:	4816      	ldr	r0, [pc, #88]	; (8000298 <main+0xdc>)
 8000240:	f000 fbed 	bl	8000a1e <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 8000244:	4814      	ldr	r0, [pc, #80]	; (8000298 <main+0xdc>)
 8000246:	f000 fcb3 	bl	8000bb0 <HAL_CAN_Start>
  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800024a:	2102      	movs	r1, #2
 800024c:	4812      	ldr	r0, [pc, #72]	; (8000298 <main+0xdc>)
 800024e:	f000 fee3 	bl	8001018 <HAL_CAN_ActivateNotification>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t TxData[8] = {0x22, 0x01, 0x23,0x00,0x00,0x00,0x00,0x00};
 8000252:	4a12      	ldr	r2, [pc, #72]	; (800029c <main+0xe0>)
 8000254:	463b      	mov	r3, r7
 8000256:	e892 0003 	ldmia.w	r2, {r0, r1}
 800025a:	e883 0003 	stmia.w	r3, {r0, r1}
	 	  if(HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&canMailbox)!= HAL_OK)
 800025e:	463a      	mov	r2, r7
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <main+0xe4>)
 8000262:	490c      	ldr	r1, [pc, #48]	; (8000294 <main+0xd8>)
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <main+0xdc>)
 8000266:	f000 fce7 	bl	8000c38 <HAL_CAN_AddTxMessage>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d007      	beq.n	8000280 <main+0xc4>
	 	  {
	 		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000270:	2110      	movs	r1, #16
 8000272:	480c      	ldr	r0, [pc, #48]	; (80002a4 <main+0xe8>)
 8000274:	f001 fc74 	bl	8001b60 <HAL_GPIO_TogglePin>
	 		  HAL_Delay(1000);
 8000278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027c:	f000 fab0 	bl	80007e0 <HAL_Delay>

	 	  }
	 	  HAL_UART_Transmit_IT(&huart1, TxData,sizeof (TxData));
 8000280:	463b      	mov	r3, r7
 8000282:	2208      	movs	r2, #8
 8000284:	4619      	mov	r1, r3
 8000286:	4808      	ldr	r0, [pc, #32]	; (80002a8 <main+0xec>)
 8000288:	f002 f8e4 	bl	8002454 <HAL_UART_Transmit_IT>
  {
 800028c:	e7e1      	b.n	8000252 <main+0x96>
 800028e:	bf00      	nop
 8000290:	200000b0 	.word	0x200000b0
 8000294:	20000098 	.word	0x20000098
 8000298:	20000028 	.word	0x20000028
 800029c:	08002ef4 	.word	0x08002ef4
 80002a0:	200000d8 	.word	0x200000d8
 80002a4:	40010c00 	.word	0x40010c00
 80002a8:	20000050 	.word	0x20000050

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b090      	sub	sp, #64	; 0x40
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fde2 	bl	8002e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ce:	2301      	movs	r3, #1
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	2301      	movs	r3, #1
 80002de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e0:	2302      	movs	r3, #2
 80002e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f0:	f107 0318 	add.w	r3, r7, #24
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 fc4d 	bl	8001b94 <HAL_RCC_OscConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000300:	f000 f8c4 	bl	800048c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	230f      	movs	r3, #15
 8000306:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000308:	2302      	movs	r3, #2
 800030a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2102      	movs	r1, #2
 800031e:	4618      	mov	r0, r3
 8000320:	f001 feba 	bl	8002098 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800032a:	f000 f8af 	bl	800048c <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3740      	adds	r7, #64	; 0x40
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800033c:	4b17      	ldr	r3, [pc, #92]	; (800039c <MX_CAN_Init+0x64>)
 800033e:	4a18      	ldr	r2, [pc, #96]	; (80003a0 <MX_CAN_Init+0x68>)
 8000340:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000342:	4b16      	ldr	r3, [pc, #88]	; (800039c <MX_CAN_Init+0x64>)
 8000344:	2204      	movs	r2, #4
 8000346:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_CAN_Init+0x64>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800034e:	4b13      	ldr	r3, [pc, #76]	; (800039c <MX_CAN_Init+0x64>)
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_CAN_Init+0x64>)
 8000356:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800035a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_CAN_Init+0x64>)
 800035e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000362:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <MX_CAN_Init+0x64>)
 8000366:	2200      	movs	r2, #0
 8000368:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_CAN_Init+0x64>)
 800036c:	2200      	movs	r2, #0
 800036e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <MX_CAN_Init+0x64>)
 8000372:	2200      	movs	r2, #0
 8000374:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_CAN_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <MX_CAN_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_CAN_Init+0x64>)
 8000384:	2200      	movs	r2, #0
 8000386:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000388:	4804      	ldr	r0, [pc, #16]	; (800039c <MX_CAN_Init+0x64>)
 800038a:	f000 fa4d 	bl	8000828 <HAL_CAN_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000394:	f000 f87a 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000028 	.word	0x20000028
 80003a0:	40006400 	.word	0x40006400

080003a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a8:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003aa:	4a12      	ldr	r2, [pc, #72]	; (80003f4 <MX_USART1_UART_Init+0x50>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_USART1_UART_Init+0x4c>)
 80003dc:	f001 ffea 	bl	80023b4 <HAL_UART_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003e6:	f000 f851 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000050 	.word	0x20000050
 80003f4:	40013800 	.word	0x40013800

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800040c:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <MX_GPIO_Init+0x8c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <MX_GPIO_Init+0x8c>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <MX_GPIO_Init+0x8c>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0320 	and.w	r3, r3, #32
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000424:	4b17      	ldr	r3, [pc, #92]	; (8000484 <MX_GPIO_Init+0x8c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a16      	ldr	r2, [pc, #88]	; (8000484 <MX_GPIO_Init+0x8c>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_GPIO_Init+0x8c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_GPIO_Init+0x8c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a10      	ldr	r2, [pc, #64]	; (8000484 <MX_GPIO_Init+0x8c>)
 8000442:	f043 0308 	orr.w	r3, r3, #8
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_GPIO_Init+0x8c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0308 	and.w	r3, r3, #8
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2110      	movs	r1, #16
 8000458:	480b      	ldr	r0, [pc, #44]	; (8000488 <MX_GPIO_Init+0x90>)
 800045a:	f001 fb69 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800045e:	2310      	movs	r3, #16
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2302      	movs	r3, #2
 800046c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	4804      	ldr	r0, [pc, #16]	; (8000488 <MX_GPIO_Init+0x90>)
 8000476:	f001 f9d7 	bl	8001828 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800047a:	bf00      	nop
 800047c:	3720      	adds	r7, #32
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000
 8000488:	40010c00 	.word	0x40010c00

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	e7fe      	b.n	8000494 <Error_Handler+0x8>
	...

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <HAL_MspInit+0x5c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <HAL_MspInit+0x5c>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <HAL_MspInit+0x5c>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <HAL_MspInit+0x5c>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <HAL_MspInit+0x5c>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <HAL_MspInit+0x5c>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <HAL_MspInit+0x60>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_MspInit+0x60>)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010000 	.word	0x40010000

080004fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a20      	ldr	r2, [pc, #128]	; (8000598 <HAL_CAN_MspInit+0x9c>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d139      	bne.n	8000590 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <HAL_CAN_MspInit+0xa0>)
 800051e:	69db      	ldr	r3, [r3, #28]
 8000520:	4a1e      	ldr	r2, [pc, #120]	; (800059c <HAL_CAN_MspInit+0xa0>)
 8000522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000526:	61d3      	str	r3, [r2, #28]
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_CAN_MspInit+0xa0>)
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <HAL_CAN_MspInit+0xa0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a18      	ldr	r2, [pc, #96]	; (800059c <HAL_CAN_MspInit+0xa0>)
 800053a:	f043 0304 	orr.w	r3, r3, #4
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <HAL_CAN_MspInit+0xa0>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0304 	and.w	r3, r3, #4
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800054c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000550:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	4619      	mov	r1, r3
 8000560:	480f      	ldr	r0, [pc, #60]	; (80005a0 <HAL_CAN_MspInit+0xa4>)
 8000562:	f001 f961 	bl	8001828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800056a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056c:	2302      	movs	r3, #2
 800056e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000570:	2303      	movs	r3, #3
 8000572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4809      	ldr	r0, [pc, #36]	; (80005a0 <HAL_CAN_MspInit+0xa4>)
 800057c:	f001 f954 	bl	8001828 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2014      	movs	r0, #20
 8000586:	f001 f866 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800058a:	2014      	movs	r0, #20
 800058c:	f001 f87f 	bl	800168e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40006400 	.word	0x40006400
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010800 	.word	0x40010800

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a20      	ldr	r2, [pc, #128]	; (8000640 <HAL_UART_MspInit+0x9c>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d139      	bne.n	8000638 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a18      	ldr	r2, [pc, #96]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <HAL_UART_MspInit+0xa0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fa:	2302      	movs	r3, #2
 80005fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fe:	2303      	movs	r3, #3
 8000600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	480f      	ldr	r0, [pc, #60]	; (8000648 <HAL_UART_MspInit+0xa4>)
 800060a:	f001 f90d 	bl	8001828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800060e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	4809      	ldr	r0, [pc, #36]	; (8000648 <HAL_UART_MspInit+0xa4>)
 8000624:	f001 f900 	bl	8001828 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2025      	movs	r0, #37	; 0x25
 800062e:	f001 f812 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000632:	2025      	movs	r0, #37	; 0x25
 8000634:	f001 f82b 	bl	800168e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40013800 	.word	0x40013800
 8000644:	40021000 	.word	0x40021000
 8000648:	40010800 	.word	0x40010800

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <NMI_Handler+0x4>

08000652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <MemManage_Handler+0x4>

0800065e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <UsageFault_Handler+0x4>

0800066a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000692:	f000 f889 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006a2:	f000 fcde 	bl	8001062 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028

080006b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <USART1_IRQHandler+0x10>)
 80006b6:	f001 ff03 	bl	80024c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000050 	.word	0x20000050

080006c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d0:	f7ff fff8 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480b      	ldr	r0, [pc, #44]	; (8000704 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006d6:	490c      	ldr	r1, [pc, #48]	; (8000708 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006d8:	4a0c      	ldr	r2, [pc, #48]	; (800070c <LoopFillZerobss+0x16>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a09      	ldr	r2, [pc, #36]	; (8000710 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006ec:	4c09      	ldr	r4, [pc, #36]	; (8000714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fa:	f002 fbcb 	bl	8002e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fd5d 	bl	80001bc <main>
  bx lr
 8000702:	4770      	bx	lr
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800070c:	08002f30 	.word	0x08002f30
  ldr r2, =_sbss
 8000710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000714:	2000010c 	.word	0x2000010c

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 ff87 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	200f      	movs	r0, #15
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff feae 	bl	8000498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 ff9f 	bl	80016aa <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 ff67 	bl	8001656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x1c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x20>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a03      	ldr	r2, [pc, #12]	; (80007c8 <HAL_IncTick+0x20>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000108 	.word	0x20000108

080007cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <HAL_GetTick+0x10>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	20000108 	.word	0x20000108

080007e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e8:	f7ff fff0 	bl	80007cc <HAL_GetTick>
 80007ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f8:	d005      	beq.n	8000806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_Delay+0x44>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000806:	bf00      	nop
 8000808:	f7ff ffe0 	bl	80007cc <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f7      	bhi.n	8000808 <HAL_Delay+0x28>
  {
  }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000008 	.word	0x20000008

08000828 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d101      	bne.n	800083a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
 8000838:	e0ed      	b.n	8000a16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d102      	bne.n	800084c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fe58 	bl	80004fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f042 0201 	orr.w	r2, r2, #1
 800085a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800085c:	f7ff ffb6 	bl	80007cc <HAL_GetTick>
 8000860:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000862:	e012      	b.n	800088a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000864:	f7ff ffb2 	bl	80007cc <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	2b0a      	cmp	r3, #10
 8000870:	d90b      	bls.n	800088a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2205      	movs	r2, #5
 8000882:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e0c5      	b.n	8000a16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	2b00      	cmp	r3, #0
 8000896:	d0e5      	beq.n	8000864 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f022 0202 	bic.w	r2, r2, #2
 80008a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008a8:	f7ff ff90 	bl	80007cc <HAL_GetTick>
 80008ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008ae:	e012      	b.n	80008d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008b0:	f7ff ff8c 	bl	80007cc <HAL_GetTick>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	2b0a      	cmp	r3, #10
 80008bc:	d90b      	bls.n	80008d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2205      	movs	r2, #5
 80008ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e09f      	b.n	8000a16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f003 0302 	and.w	r3, r3, #2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1e5      	bne.n	80008b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7e1b      	ldrb	r3, [r3, #24]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d108      	bne.n	80008fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	e007      	b.n	800090e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7e5b      	ldrb	r3, [r3, #25]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d108      	bne.n	8000928 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	e007      	b.n	8000938 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000936:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7e9b      	ldrb	r3, [r3, #26]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d108      	bne.n	8000952 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f042 0220 	orr.w	r2, r2, #32
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	e007      	b.n	8000962 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f022 0220 	bic.w	r2, r2, #32
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7edb      	ldrb	r3, [r3, #27]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d108      	bne.n	800097c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f022 0210 	bic.w	r2, r2, #16
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	e007      	b.n	800098c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f042 0210 	orr.w	r2, r2, #16
 800098a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7f1b      	ldrb	r3, [r3, #28]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d108      	bne.n	80009a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f042 0208 	orr.w	r2, r2, #8
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	e007      	b.n	80009b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f022 0208 	bic.w	r2, r2, #8
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7f5b      	ldrb	r3, [r3, #29]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d108      	bne.n	80009d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f042 0204 	orr.w	r2, r2, #4
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e007      	b.n	80009e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f022 0204 	bic.w	r2, r2, #4
 80009de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689a      	ldr	r2, [r3, #8]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	431a      	orrs	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	431a      	orrs	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	ea42 0103 	orr.w	r1, r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	1e5a      	subs	r2, r3, #1
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	430a      	orrs	r2, r1
 8000a04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b087      	sub	sp, #28
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a34:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a36:	7cfb      	ldrb	r3, [r7, #19]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d003      	beq.n	8000a44 <HAL_CAN_ConfigFilter+0x26>
 8000a3c:	7cfb      	ldrb	r3, [r7, #19]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	f040 80aa 	bne.w	8000b98 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a4a:	f043 0201 	orr.w	r2, r3, #1
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	f003 031f 	and.w	r3, r3, #31
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d123      	bne.n	8000ac6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	401a      	ands	r2, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000aa0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3248      	adds	r2, #72	; 0x48
 8000aa6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000aba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000abc:	6979      	ldr	r1, [r7, #20]
 8000abe:	3348      	adds	r3, #72	; 0x48
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	440b      	add	r3, r1
 8000ac4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d122      	bne.n	8000b14 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aea:	683a      	ldr	r2, [r7, #0]
 8000aec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000aee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	3248      	adds	r2, #72	; 0x48
 8000af4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b0a:	6979      	ldr	r1, [r7, #20]
 8000b0c:	3348      	adds	r3, #72	; 0x48
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d109      	bne.n	8000b30 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b2e:	e007      	b.n	8000b40 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d109      	bne.n	8000b5c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000b5a:	e007      	b.n	8000b6c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	431a      	orrs	r2, r3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	6a1b      	ldr	r3, [r3, #32]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d107      	bne.n	8000b84 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b8a:	f023 0201 	bic.w	r2, r3, #1
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	e006      	b.n	8000ba6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
  }
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	371c      	adds	r7, #28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d12e      	bne.n	8000c22 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 0201 	bic.w	r2, r2, #1
 8000bda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000bdc:	f7ff fdf6 	bl	80007cc <HAL_GetTick>
 8000be0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000be2:	e012      	b.n	8000c0a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000be4:	f7ff fdf2 	bl	80007cc <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b0a      	cmp	r3, #10
 8000bf0:	d90b      	bls.n	8000c0a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2205      	movs	r2, #5
 8000c02:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e012      	b.n	8000c30 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1e5      	bne.n	8000be4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e006      	b.n	8000c30 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c26:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
  }
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c4c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c56:	7ffb      	ldrb	r3, [r7, #31]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d003      	beq.n	8000c64 <HAL_CAN_AddTxMessage+0x2c>
 8000c5c:	7ffb      	ldrb	r3, [r7, #31]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	f040 80ad 	bne.w	8000dbe <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10a      	bne.n	8000c84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d105      	bne.n	8000c84 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 8095 	beq.w	8000dae <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	0e1b      	lsrs	r3, r3, #24
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c8e:	2201      	movs	r2, #1
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10d      	bne.n	8000cbc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000caa:	68f9      	ldr	r1, [r7, #12]
 8000cac:	6809      	ldr	r1, [r1, #0]
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3318      	adds	r3, #24
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	440b      	add	r3, r1
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e00f      	b.n	8000cdc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cc6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ccc:	68f9      	ldr	r1, [r7, #12]
 8000cce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000cd0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3318      	adds	r3, #24
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	440b      	add	r3, r1
 8000cda:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	6819      	ldr	r1, [r3, #0]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3318      	adds	r3, #24
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	440b      	add	r3, r1
 8000cec:	3304      	adds	r3, #4
 8000cee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	7d1b      	ldrb	r3, [r3, #20]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d111      	bne.n	8000d1c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3318      	adds	r3, #24
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	4413      	add	r3, r2
 8000d04:	3304      	adds	r3, #4
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	6811      	ldr	r1, [r2, #0]
 8000d0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3318      	adds	r3, #24
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	440b      	add	r3, r1
 8000d18:	3304      	adds	r3, #4
 8000d1a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3307      	adds	r3, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	061a      	lsls	r2, r3, #24
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3306      	adds	r3, #6
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3305      	adds	r3, #5
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	4313      	orrs	r3, r2
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	3204      	adds	r2, #4
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	4610      	mov	r0, r2
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	6811      	ldr	r1, [r2, #0]
 8000d44:	ea43 0200 	orr.w	r2, r3, r0
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	440b      	add	r3, r1
 8000d4e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3303      	adds	r3, #3
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	061a      	lsls	r2, r3, #24
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3302      	adds	r3, #2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	041b      	lsls	r3, r3, #16
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	4610      	mov	r0, r2
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	6811      	ldr	r1, [r2, #0]
 8000d7a:	ea43 0200 	orr.w	r2, r3, r0
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	011b      	lsls	r3, r3, #4
 8000d82:	440b      	add	r3, r1
 8000d84:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d88:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3318      	adds	r3, #24
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	4413      	add	r3, r2
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	6811      	ldr	r1, [r2, #0]
 8000d9c:	f043 0201 	orr.w	r2, r3, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3318      	adds	r3, #24
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	440b      	add	r3, r1
 8000da8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e00e      	b.n	8000dcc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e006      	b.n	8000dcc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
  }
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3724      	adds	r7, #36	; 0x24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr

08000dd6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b087      	sub	sp, #28
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dea:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d003      	beq.n	8000dfa <HAL_CAN_GetRxMessage+0x24>
 8000df2:	7dfb      	ldrb	r3, [r7, #23]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	f040 8103 	bne.w	8001000 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10e      	bne.n	8000e1e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d116      	bne.n	8000e3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e0f7      	b.n	800100e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d107      	bne.n	8000e3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e0e8      	b.n	800100e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	331b      	adds	r3, #27
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	4413      	add	r3, r2
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0204 	and.w	r2, r3, #4
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10c      	bne.n	8000e74 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	331b      	adds	r3, #27
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	4413      	add	r3, r2
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	0d5b      	lsrs	r3, r3, #21
 8000e6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e00b      	b.n	8000e8c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	331b      	adds	r3, #27
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	4413      	add	r3, r2
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	331b      	adds	r3, #27
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	4413      	add	r3, r2
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0202 	and.w	r2, r3, #2
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	331b      	adds	r3, #27
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	3304      	adds	r3, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	e00b      	b.n	8000eda <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	331b      	adds	r3, #27
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	3304      	adds	r3, #4
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 020f 	and.w	r2, r3, #15
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	331b      	adds	r3, #27
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	0a1b      	lsrs	r3, r3, #8
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	331b      	adds	r3, #27
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	4413      	add	r3, r2
 8000efe:	3304      	adds	r3, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	0c1b      	lsrs	r3, r3, #16
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	4413      	add	r3, r2
 8000f14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	4413      	add	r3, r2
 8000f2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0a1a      	lsrs	r2, r3, #8
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	4413      	add	r3, r2
 8000f44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	0c1a      	lsrs	r2, r3, #16
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	3302      	adds	r3, #2
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	0e1a      	lsrs	r2, r3, #24
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3303      	adds	r3, #3
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	4413      	add	r3, r2
 8000f78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	3304      	adds	r3, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	4413      	add	r3, r2
 8000f90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	0a1a      	lsrs	r2, r3, #8
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	3305      	adds	r3, #5
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	4413      	add	r3, r2
 8000faa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	0c1a      	lsrs	r2, r3, #16
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	3306      	adds	r3, #6
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	0e1a      	lsrs	r2, r3, #24
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	3307      	adds	r3, #7
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d108      	bne.n	8000fec <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f042 0220 	orr.w	r2, r2, #32
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	e007      	b.n	8000ffc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	691a      	ldr	r2, [r3, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0220 	orr.w	r2, r2, #32
 8000ffa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e006      	b.n	800100e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
  }
}
 800100e:	4618      	mov	r0, r3
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001028:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d002      	beq.n	8001036 <HAL_CAN_ActivateNotification+0x1e>
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d109      	bne.n	800104a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6959      	ldr	r1, [r3, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e006      	b.n	8001058 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
  }
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b08a      	sub	sp, #40	; 0x28
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d07c      	beq.n	80011a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d023      	beq.n	80010fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2201      	movs	r2, #1
 80010b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f983 	bl	80013d0 <HAL_CAN_TxMailbox0CompleteCallback>
 80010ca:	e016      	b.n	80010fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d004      	beq.n	80010e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
 80010de:	e00c      	b.n	80010fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d004      	beq.n	80010f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
 80010f2:	e002      	b.n	80010fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 f986 	bl	8001406 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001100:	2b00      	cmp	r3, #0
 8001102:	d024      	beq.n	800114e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f962 	bl	80013e2 <HAL_CAN_TxMailbox1CompleteCallback>
 800111e:	e016      	b.n	800114e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
 8001132:	e00c      	b.n	800114e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800113a:	2b00      	cmp	r3, #0
 800113c:	d004      	beq.n	8001148 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	e002      	b.n	800114e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f965 	bl	8001418 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d024      	beq.n	80011a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001160:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f941 	bl	80013f4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001172:	e016      	b.n	80011a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
 8001186:	e00c      	b.n	80011a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
 800119a:	e002      	b.n	80011a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f944 	bl	800142a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00c      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d007      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2210      	movs	r2, #16
 80011c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00b      	beq.n	80011e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2208      	movs	r2, #8
 80011e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f92a 	bl	800143c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d009      	beq.n	8001206 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7fe ffa3 	bl	800014c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00c      	beq.n	800122a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001220:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2210      	movs	r2, #16
 8001228:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00b      	beq.n	800124c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d006      	beq.n	800124c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2208      	movs	r2, #8
 8001244:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f90a 	bl	8001460 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	2b00      	cmp	r3, #0
 8001254:	d009      	beq.n	800126a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f8f2 	bl	800144e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00b      	beq.n	800128c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2210      	movs	r2, #16
 8001284:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f8f3 	bl	8001472 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2208      	movs	r2, #8
 80012a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 f8eb 	bl	8001484 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d07b      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d072      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001300:	2b00      	cmp	r3, #0
 8001302:	d008      	beq.n	8001316 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800131c:	2b00      	cmp	r3, #0
 800131e:	d043      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001326:	2b00      	cmp	r3, #0
 8001328:	d03e      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001330:	2b60      	cmp	r3, #96	; 0x60
 8001332:	d02b      	beq.n	800138c <HAL_CAN_IRQHandler+0x32a>
 8001334:	2b60      	cmp	r3, #96	; 0x60
 8001336:	d82e      	bhi.n	8001396 <HAL_CAN_IRQHandler+0x334>
 8001338:	2b50      	cmp	r3, #80	; 0x50
 800133a:	d022      	beq.n	8001382 <HAL_CAN_IRQHandler+0x320>
 800133c:	2b50      	cmp	r3, #80	; 0x50
 800133e:	d82a      	bhi.n	8001396 <HAL_CAN_IRQHandler+0x334>
 8001340:	2b40      	cmp	r3, #64	; 0x40
 8001342:	d019      	beq.n	8001378 <HAL_CAN_IRQHandler+0x316>
 8001344:	2b40      	cmp	r3, #64	; 0x40
 8001346:	d826      	bhi.n	8001396 <HAL_CAN_IRQHandler+0x334>
 8001348:	2b30      	cmp	r3, #48	; 0x30
 800134a:	d010      	beq.n	800136e <HAL_CAN_IRQHandler+0x30c>
 800134c:	2b30      	cmp	r3, #48	; 0x30
 800134e:	d822      	bhi.n	8001396 <HAL_CAN_IRQHandler+0x334>
 8001350:	2b10      	cmp	r3, #16
 8001352:	d002      	beq.n	800135a <HAL_CAN_IRQHandler+0x2f8>
 8001354:	2b20      	cmp	r3, #32
 8001356:	d005      	beq.n	8001364 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001358:	e01d      	b.n	8001396 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001362:	e019      	b.n	8001398 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800136c:	e014      	b.n	8001398 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	f043 0320 	orr.w	r3, r3, #32
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001376:	e00f      	b.n	8001398 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001380:	e00a      	b.n	8001398 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800138a:	e005      	b.n	8001398 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001394:	e000      	b.n	8001398 <HAL_CAN_IRQHandler+0x336>
            break;
 8001396:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699a      	ldr	r2, [r3, #24]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2204      	movs	r2, #4
 80013ae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d008      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f867 	bl	8001496 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4906      	ldr	r1, [pc, #24]	; (8001540 <__NVIC_EnableIRQ+0x34>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f7ff ff90 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff2d 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff42 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff90 	bl	8001598 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5f 	bl	8001544 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff35 	bl	800150c <__NVIC_EnableIRQ>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffa2 	bl	80015fc <SysTick_Config>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d008      	beq.n	80016ec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2204      	movs	r2, #4
 80016de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e020      	b.n	800172e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 020e 	bic.w	r2, r2, #14
 80016fa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001714:	2101      	movs	r1, #1
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d005      	beq.n	800175c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2204      	movs	r2, #4
 8001754:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	e051      	b.n	8001800 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 020e 	bic.w	r2, r2, #14
 800176a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a22      	ldr	r2, [pc, #136]	; (800180c <HAL_DMA_Abort_IT+0xd4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d029      	beq.n	80017da <HAL_DMA_Abort_IT+0xa2>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a21      	ldr	r2, [pc, #132]	; (8001810 <HAL_DMA_Abort_IT+0xd8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d022      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x9e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_DMA_Abort_IT+0xdc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01a      	beq.n	80017d0 <HAL_DMA_Abort_IT+0x98>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <HAL_DMA_Abort_IT+0xe0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d012      	beq.n	80017ca <HAL_DMA_Abort_IT+0x92>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1c      	ldr	r2, [pc, #112]	; (800181c <HAL_DMA_Abort_IT+0xe4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00a      	beq.n	80017c4 <HAL_DMA_Abort_IT+0x8c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <HAL_DMA_Abort_IT+0xe8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d102      	bne.n	80017be <HAL_DMA_Abort_IT+0x86>
 80017b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017bc:	e00e      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c2:	e00b      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c8:	e008      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ce:	e005      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d4:	e002      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017d6:	2310      	movs	r3, #16
 80017d8:	e000      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017da:	2301      	movs	r3, #1
 80017dc:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_DMA_Abort_IT+0xec>)
 80017de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
    } 
  }
  return status;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40020008 	.word	0x40020008
 8001810:	4002001c 	.word	0x4002001c
 8001814:	40020030 	.word	0x40020030
 8001818:	40020044 	.word	0x40020044
 800181c:	40020058 	.word	0x40020058
 8001820:	4002006c 	.word	0x4002006c
 8001824:	40020000 	.word	0x40020000

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b08b      	sub	sp, #44	; 0x2c
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183a:	e169      	b.n	8001b10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800183c:	2201      	movs	r2, #1
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 8158 	bne.w	8001b0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a9a      	ldr	r2, [pc, #616]	; (8001ac8 <HAL_GPIO_Init+0x2a0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d05e      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001864:	4a98      	ldr	r2, [pc, #608]	; (8001ac8 <HAL_GPIO_Init+0x2a0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d875      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800186a:	4a98      	ldr	r2, [pc, #608]	; (8001acc <HAL_GPIO_Init+0x2a4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d058      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001870:	4a96      	ldr	r2, [pc, #600]	; (8001acc <HAL_GPIO_Init+0x2a4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d86f      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 8001876:	4a96      	ldr	r2, [pc, #600]	; (8001ad0 <HAL_GPIO_Init+0x2a8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d052      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 800187c:	4a94      	ldr	r2, [pc, #592]	; (8001ad0 <HAL_GPIO_Init+0x2a8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d869      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 8001882:	4a94      	ldr	r2, [pc, #592]	; (8001ad4 <HAL_GPIO_Init+0x2ac>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d04c      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001888:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <HAL_GPIO_Init+0x2ac>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d863      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800188e:	4a92      	ldr	r2, [pc, #584]	; (8001ad8 <HAL_GPIO_Init+0x2b0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d046      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001894:	4a90      	ldr	r2, [pc, #576]	; (8001ad8 <HAL_GPIO_Init+0x2b0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d85d      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800189a:	2b12      	cmp	r3, #18
 800189c:	d82a      	bhi.n	80018f4 <HAL_GPIO_Init+0xcc>
 800189e:	2b12      	cmp	r3, #18
 80018a0:	d859      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <HAL_GPIO_Init+0x80>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	08001923 	.word	0x08001923
 80018ac:	080018fd 	.word	0x080018fd
 80018b0:	0800190f 	.word	0x0800190f
 80018b4:	08001951 	.word	0x08001951
 80018b8:	08001957 	.word	0x08001957
 80018bc:	08001957 	.word	0x08001957
 80018c0:	08001957 	.word	0x08001957
 80018c4:	08001957 	.word	0x08001957
 80018c8:	08001957 	.word	0x08001957
 80018cc:	08001957 	.word	0x08001957
 80018d0:	08001957 	.word	0x08001957
 80018d4:	08001957 	.word	0x08001957
 80018d8:	08001957 	.word	0x08001957
 80018dc:	08001957 	.word	0x08001957
 80018e0:	08001957 	.word	0x08001957
 80018e4:	08001957 	.word	0x08001957
 80018e8:	08001957 	.word	0x08001957
 80018ec:	08001905 	.word	0x08001905
 80018f0:	08001919 	.word	0x08001919
 80018f4:	4a79      	ldr	r2, [pc, #484]	; (8001adc <HAL_GPIO_Init+0x2b4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018fa:	e02c      	b.n	8001956 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e029      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	3304      	adds	r3, #4
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e024      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	3308      	adds	r3, #8
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e01f      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	330c      	adds	r3, #12
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e01a      	b.n	8001958 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800192a:	2304      	movs	r3, #4
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e013      	b.n	8001958 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001938:	2308      	movs	r3, #8
 800193a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	611a      	str	r2, [r3, #16]
          break;
 8001942:	e009      	b.n	8001958 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	615a      	str	r2, [r3, #20]
          break;
 800194e:	e003      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
          break;
 8001954:	e000      	b.n	8001958 <HAL_GPIO_Init+0x130>
          break;
 8001956:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2bff      	cmp	r3, #255	; 0xff
 800195c:	d801      	bhi.n	8001962 <HAL_GPIO_Init+0x13a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_Init+0x13e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3304      	adds	r3, #4
 8001966:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d802      	bhi.n	8001974 <HAL_GPIO_Init+0x14c>
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x152>
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3b08      	subs	r3, #8
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	210f      	movs	r1, #15
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	6a39      	ldr	r1, [r7, #32]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	431a      	orrs	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80b1 	beq.w	8001b0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a8:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a4c      	ldr	r2, [pc, #304]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019c0:	4a48      	ldr	r2, [pc, #288]	; (8001ae4 <HAL_GPIO_Init+0x2bc>)
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a40      	ldr	r2, [pc, #256]	; (8001ae8 <HAL_GPIO_Init+0x2c0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d013      	beq.n	8001a14 <HAL_GPIO_Init+0x1ec>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3f      	ldr	r2, [pc, #252]	; (8001aec <HAL_GPIO_Init+0x2c4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d00d      	beq.n	8001a10 <HAL_GPIO_Init+0x1e8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a3e      	ldr	r2, [pc, #248]	; (8001af0 <HAL_GPIO_Init+0x2c8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d007      	beq.n	8001a0c <HAL_GPIO_Init+0x1e4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a3d      	ldr	r2, [pc, #244]	; (8001af4 <HAL_GPIO_Init+0x2cc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_GPIO_Init+0x1e0>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a08:	2304      	movs	r3, #4
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a14:	2300      	movs	r3, #0
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a26:	492f      	ldr	r1, [pc, #188]	; (8001ae4 <HAL_GPIO_Init+0x2bc>)
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	492c      	ldr	r1, [pc, #176]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4928      	ldr	r1, [pc, #160]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	4922      	ldr	r1, [pc, #136]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60cb      	str	r3, [r1, #12]
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	491e      	ldr	r1, [pc, #120]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	4918      	ldr	r1, [pc, #96]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4914      	ldr	r1, [pc, #80]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d021      	beq.n	8001afc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
 8001ac4:	e021      	b.n	8001b0a <HAL_GPIO_Init+0x2e2>
 8001ac6:	bf00      	nop
 8001ac8:	10320000 	.word	0x10320000
 8001acc:	10310000 	.word	0x10310000
 8001ad0:	10220000 	.word	0x10220000
 8001ad4:	10210000 	.word	0x10210000
 8001ad8:	10120000 	.word	0x10120000
 8001adc:	10110000 	.word	0x10110000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40010c00 	.word	0x40010c00
 8001af0:	40011000 	.word	0x40011000
 8001af4:	40011400 	.word	0x40011400
 8001af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4909      	ldr	r1, [pc, #36]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f ae8e 	bne.w	800183c <HAL_GPIO_Init+0x14>
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	372c      	adds	r7, #44	; 0x2c
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b4c:	e003      	b.n	8001b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	611a      	str	r2, [r3, #16]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4013      	ands	r3, r2
 8001b78:	041a      	lsls	r2, r3, #16
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43d9      	mvns	r1, r3
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	400b      	ands	r3, r1
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e272      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8087 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb4:	4b92      	ldr	r3, [pc, #584]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d00c      	beq.n	8001bda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc0:	4b8f      	ldr	r3, [pc, #572]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d112      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x5e>
 8001bcc:	4b8c      	ldr	r3, [pc, #560]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bda:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d06c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x12c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d168      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e24c      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x76>
 8001bfc:	4b80      	ldr	r3, [pc, #512]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a7f      	ldr	r2, [pc, #508]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	e02e      	b.n	8001c68 <HAL_RCC_OscConfig+0xd4>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x98>
 8001c12:	4b7b      	ldr	r3, [pc, #492]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7a      	ldr	r2, [pc, #488]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4b78      	ldr	r3, [pc, #480]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a77      	ldr	r2, [pc, #476]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e01d      	b.n	8001c68 <HAL_RCC_OscConfig+0xd4>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0xbc>
 8001c36:	4b72      	ldr	r3, [pc, #456]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a71      	ldr	r2, [pc, #452]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b6f      	ldr	r3, [pc, #444]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6e      	ldr	r2, [pc, #440]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_RCC_OscConfig+0xd4>
 8001c50:	4b6b      	ldr	r3, [pc, #428]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a6a      	ldr	r2, [pc, #424]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a67      	ldr	r2, [pc, #412]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7fe fdac 	bl	80007cc <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7fe fda8 	bl	80007cc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e200      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b5d      	ldr	r3, [pc, #372]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0xe4>
 8001c96:	e014      	b.n	8001cc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7fe fd98 	bl	80007cc <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7fe fd94 	bl	80007cc <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1ec      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x10c>
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d063      	beq.n	8001d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cce:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d11c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x18c>
 8001ce6:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d116      	bne.n	8001d20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <HAL_RCC_OscConfig+0x176>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e1c0      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4939      	ldr	r1, [pc, #228]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	e03a      	b.n	8001d96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7fe fd4d 	bl	80007cc <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d36:	f7fe fd49 	bl	80007cc <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e1a1      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d54:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4927      	ldr	r1, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
 8001d68:	e015      	b.n	8001d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6a:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <HAL_RCC_OscConfig+0x270>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7fe fd2c 	bl	80007cc <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d78:	f7fe fd28 	bl	80007cc <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e180      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d03a      	beq.n	8001e18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d019      	beq.n	8001dde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db0:	f7fe fd0c 	bl	80007cc <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db8:	f7fe fd08 	bl	80007cc <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e160      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f000 face 	bl	8002378 <RCC_Delay>
 8001ddc:	e01c      	b.n	8001e18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7fe fcf2 	bl	80007cc <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dea:	e00f      	b.n	8001e0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dec:	f7fe fcee 	bl	80007cc <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d908      	bls.n	8001e0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e146      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	42420000 	.word	0x42420000
 8001e08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0c:	4b92      	ldr	r3, [pc, #584]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e9      	bne.n	8001dec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80a6 	beq.w	8001f72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2a:	4b8b      	ldr	r3, [pc, #556]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b88      	ldr	r3, [pc, #544]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a87      	ldr	r2, [pc, #540]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b85      	ldr	r3, [pc, #532]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e52:	4b82      	ldr	r3, [pc, #520]	; (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d118      	bne.n	8001e90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e5e:	4b7f      	ldr	r3, [pc, #508]	; (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a7e      	ldr	r2, [pc, #504]	; (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fcaf 	bl	80007cc <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e72:	f7fe fcab 	bl	80007cc <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b64      	cmp	r3, #100	; 0x64
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e103      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	4b75      	ldr	r3, [pc, #468]	; (800205c <HAL_RCC_OscConfig+0x4c8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x312>
 8001e98:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4a6e      	ldr	r2, [pc, #440]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6213      	str	r3, [r2, #32]
 8001ea4:	e02d      	b.n	8001f02 <HAL_RCC_OscConfig+0x36e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x334>
 8001eae:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4a69      	ldr	r2, [pc, #420]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6213      	str	r3, [r2, #32]
 8001eba:	4b67      	ldr	r3, [pc, #412]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a66      	ldr	r2, [pc, #408]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	e01c      	b.n	8001f02 <HAL_RCC_OscConfig+0x36e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d10c      	bne.n	8001eea <HAL_RCC_OscConfig+0x356>
 8001ed0:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a60      	ldr	r2, [pc, #384]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6213      	str	r3, [r2, #32]
 8001edc:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a5d      	ldr	r2, [pc, #372]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	e00b      	b.n	8001f02 <HAL_RCC_OscConfig+0x36e>
 8001eea:	4b5b      	ldr	r3, [pc, #364]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a5a      	ldr	r2, [pc, #360]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	4b58      	ldr	r3, [pc, #352]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a57      	ldr	r2, [pc, #348]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d015      	beq.n	8001f36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7fe fc5f 	bl	80007cc <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7fe fc5b 	bl	80007cc <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e0b1      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f28:	4b4b      	ldr	r3, [pc, #300]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ee      	beq.n	8001f12 <HAL_RCC_OscConfig+0x37e>
 8001f34:	e014      	b.n	8001f60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7fe fc49 	bl	80007cc <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7fe fc45 	bl	80007cc <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e09b      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f54:	4b40      	ldr	r3, [pc, #256]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ee      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d105      	bne.n	8001f72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f66:	4b3c      	ldr	r3, [pc, #240]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a3b      	ldr	r2, [pc, #236]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8087 	beq.w	800208a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d061      	beq.n	800204c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d146      	bne.n	800201e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b33      	ldr	r3, [pc, #204]	; (8002060 <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe fc19 	bl	80007cc <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7fe fc15 	bl	80007cc <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e06d      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc4:	d108      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	4921      	ldr	r1, [pc, #132]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a19      	ldr	r1, [r3, #32]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	491b      	ldr	r1, [pc, #108]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x4cc>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fbe9 	bl	80007cc <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7fe fbe5 	bl	80007cc <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e03d      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x46a>
 800201c:	e035      	b.n	800208a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_OscConfig+0x4cc>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fbd2 	bl	80007cc <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7fe fbce 	bl	80007cc <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e026      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x498>
 800204a:	e01e      	b.n	800208a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d107      	bne.n	8002064 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e019      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
 8002058:	40021000 	.word	0x40021000
 800205c:	40007000 	.word	0x40007000
 8002060:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_OscConfig+0x500>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	429a      	cmp	r2, r3
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0d0      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b6a      	ldr	r3, [pc, #424]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d910      	bls.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b67      	ldr	r3, [pc, #412]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 0207 	bic.w	r2, r3, #7
 80020c2:	4965      	ldr	r1, [pc, #404]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	4b63      	ldr	r3, [pc, #396]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0b8      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020f4:	4b59      	ldr	r3, [pc, #356]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800210c:	4b53      	ldr	r3, [pc, #332]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	494d      	ldr	r1, [pc, #308]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d040      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d107      	bne.n	800214e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d115      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e07f      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e073      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	4b3d      	ldr	r3, [pc, #244]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06b      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f023 0203 	bic.w	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4936      	ldr	r1, [pc, #216]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002188:	f7fe fb20 	bl	80007cc <HAL_GetTick>
 800218c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002190:	f7fe fb1c 	bl	80007cc <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e053      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 020c 	and.w	r2, r3, #12
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d1eb      	bne.n	8002190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b8:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d210      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 0207 	bic.w	r2, r3, #7
 80021ce:	4922      	ldr	r1, [pc, #136]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e032      	b.n	800224e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4916      	ldr	r1, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	490e      	ldr	r1, [pc, #56]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002226:	f000 f821 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800222a:	4602      	mov	r2, r0
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	490a      	ldr	r1, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1c8>)
 8002238:	5ccb      	ldrb	r3, [r1, r3]
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1cc>)
 8002240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x1d0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fa7e 	bl	8000748 <HAL_InitTick>

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
 8002260:	08002efc 	.word	0x08002efc
 8002264:	20000000 	.word	0x20000000
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_RCC_GetSysClockFreq+0x94>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b04      	cmp	r3, #4
 8002294:	d002      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x30>
 8002296:	2b08      	cmp	r3, #8
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x36>
 800229a:	e027      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_GetSysClockFreq+0x98>)
 800229e:	613b      	str	r3, [r7, #16]
      break;
 80022a0:	e027      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	0c9b      	lsrs	r3, r3, #18
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_RCC_GetSysClockFreq+0x94>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0c5b      	lsrs	r3, r3, #17
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_RCC_GetSysClockFreq+0xa0>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ce:	fb03 f202 	mul.w	r2, r3, r2
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e004      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	613b      	str	r3, [r7, #16]
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	613b      	str	r3, [r7, #16]
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	693b      	ldr	r3, [r7, #16]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	007a1200 	.word	0x007a1200
 8002308:	08002f14 	.word	0x08002f14
 800230c:	08002f24 	.word	0x08002f24
 8002310:	003d0900 	.word	0x003d0900

08002314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b02      	ldr	r3, [pc, #8]	; (8002324 <HAL_RCC_GetHCLKFreq+0x10>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	20000000 	.word	0x20000000

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800232c:	f7ff fff2 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4903      	ldr	r1, [pc, #12]	; (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	08002f0c 	.word	0x08002f0c

08002350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002354:	f7ff ffde 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	0adb      	lsrs	r3, r3, #11
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	08002f0c 	.word	0x08002f0c

08002378 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <RCC_Delay+0x34>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <RCC_Delay+0x38>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0a5b      	lsrs	r3, r3, #9
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002394:	bf00      	nop
  }
  while (Delay --);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	60fa      	str	r2, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f9      	bne.n	8002394 <RCC_Delay+0x1c>
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	20000000 	.word	0x20000000
 80023b0:	10624dd3 	.word	0x10624dd3

080023b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e042      	b.n	800244c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe f8e2 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2224      	movs	r2, #36	; 0x24
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fcb5 	bl	8002d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800240c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800241c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800242c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b20      	cmp	r3, #32
 800246c:	d121      	bne.n	80024b2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_UART_Transmit_IT+0x26>
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e01a      	b.n	80024b4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	88fa      	ldrh	r2, [r7, #6]
 800248e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2221      	movs	r2, #33	; 0x21
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024ac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
	...

080024c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0ba      	sub	sp, #232	; 0xe8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80024fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_UART_IRQHandler+0x66>
 8002512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fb63 	bl	8002bea <UART_Receive_IT>
      return;
 8002524:	e25b      	b.n	80029de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80de 	beq.w	80026ec <HAL_UART_IRQHandler+0x22c>
 8002530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800253c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002540:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80d1 	beq.w	80026ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800254a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_UART_IRQHandler+0xae>
 8002556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800256e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_UART_IRQHandler+0xd2>
 800257a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f043 0202 	orr.w	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_UART_IRQHandler+0xf6>
 800259e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f043 0204 	orr.w	r2, r3, #4
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d011      	beq.n	80025e6 <HAL_UART_IRQHandler+0x126>
 80025c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f043 0208 	orr.w	r2, r3, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 81f2 	beq.w	80029d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_UART_IRQHandler+0x14e>
 80025fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 faee 	bl	8002bea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <HAL_UART_IRQHandler+0x17a>
 8002632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d04f      	beq.n	80026da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f9f8 	bl	8002a30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d041      	beq.n	80026d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3314      	adds	r3, #20
 8002654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800265c:	e853 3f00 	ldrex	r3, [r3]
 8002660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800266c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3314      	adds	r3, #20
 8002676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800267a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800267e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1d9      	bne.n	800264e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d013      	beq.n	80026ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	4a7e      	ldr	r2, [pc, #504]	; (80028a0 <HAL_UART_IRQHandler+0x3e0>)
 80026a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f842 	bl	8001738 <HAL_DMA_Abort_IT>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026c4:	4610      	mov	r0, r2
 80026c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c8:	e00e      	b.n	80026e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f99c 	bl	8002a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d0:	e00a      	b.n	80026e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f998 	bl	8002a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	e006      	b.n	80026e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f994 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80026e6:	e175      	b.n	80029d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	bf00      	nop
    return;
 80026ea:	e173      	b.n	80029d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	f040 814f 	bne.w	8002994 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8148 	beq.w	8002994 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8141 	beq.w	8002994 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80b6 	beq.w	80028a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002744:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8145 	beq.w	80029d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002756:	429a      	cmp	r2, r3
 8002758:	f080 813e 	bcs.w	80029d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002762:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b20      	cmp	r3, #32
 800276c:	f000 8088 	beq.w	8002880 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800277e:	e853 3f00 	ldrex	r3, [r3]
 8002782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800278a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800278e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800279c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027ac:	e841 2300 	strex	r3, r2, [r1]
 80027b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1d9      	bne.n	8002770 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3314      	adds	r3, #20
 80027c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c6:	e853 3f00 	ldrex	r3, [r3]
 80027ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3314      	adds	r3, #20
 80027dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027ec:	e841 2300 	strex	r3, r2, [r1]
 80027f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1e1      	bne.n	80027bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3314      	adds	r3, #20
 80027fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002802:	e853 3f00 	ldrex	r3, [r3]
 8002806:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800280a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3314      	adds	r3, #20
 8002818:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800281c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800281e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002820:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002822:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002824:	e841 2300 	strex	r3, r2, [r1]
 8002828:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800282a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e3      	bne.n	80027f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	330c      	adds	r3, #12
 8002844:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002848:	e853 3f00 	ldrex	r3, [r3]
 800284c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800284e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002850:	f023 0310 	bic.w	r3, r3, #16
 8002854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002862:	65ba      	str	r2, [r7, #88]	; 0x58
 8002864:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800286a:	e841 2300 	strex	r3, r2, [r1]
 800286e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1e3      	bne.n	800283e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe ff21 	bl	80016c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800288e:	b29b      	uxth	r3, r3
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	b29b      	uxth	r3, r3
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8bf 	bl	8002a1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800289c:	e09c      	b.n	80029d8 <HAL_UART_IRQHandler+0x518>
 800289e:	bf00      	nop
 80028a0:	08002af5 	.word	0x08002af5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 808e 	beq.w	80029dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8089 	beq.w	80029dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d4:	e853 3f00 	ldrex	r3, [r3]
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028ee:	647a      	str	r2, [r7, #68]	; 0x44
 80028f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028f6:	e841 2300 	strex	r3, r2, [r1]
 80028fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1e3      	bne.n	80028ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3314      	adds	r3, #20
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	e853 3f00 	ldrex	r3, [r3]
 8002910:	623b      	str	r3, [r7, #32]
   return(result);
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3314      	adds	r3, #20
 8002922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002926:	633a      	str	r2, [r7, #48]	; 0x30
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800292c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292e:	e841 2300 	strex	r3, r2, [r1]
 8002932:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1e3      	bne.n	8002902 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	e853 3f00 	ldrex	r3, [r3]
 8002956:	60fb      	str	r3, [r7, #12]
   return(result);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0310 	bic.w	r3, r3, #16
 800295e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800296c:	61fa      	str	r2, [r7, #28]
 800296e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002970:	69b9      	ldr	r1, [r7, #24]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	e841 2300 	strex	r3, r2, [r1]
 8002978:	617b      	str	r3, [r7, #20]
   return(result);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e3      	bne.n	8002948 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f844 	bl	8002a1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002992:	e023      	b.n	80029dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <HAL_UART_IRQHandler+0x4f4>
 80029a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f8b5 	bl	8002b1c <UART_Transmit_IT>
    return;
 80029b2:	e014      	b.n	80029de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00e      	beq.n	80029de <HAL_UART_IRQHandler+0x51e>
 80029c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8f4 	bl	8002bba <UART_EndTransmit_IT>
    return;
 80029d2:	e004      	b.n	80029de <HAL_UART_IRQHandler+0x51e>
    return;
 80029d4:	bf00      	nop
 80029d6:	e002      	b.n	80029de <HAL_UART_IRQHandler+0x51e>
      return;
 80029d8:	bf00      	nop
 80029da:	e000      	b.n	80029de <HAL_UART_IRQHandler+0x51e>
      return;
 80029dc:	bf00      	nop
  }
}
 80029de:	37e8      	adds	r7, #232	; 0xe8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b095      	sub	sp, #84	; 0x54
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a42:	e853 3f00 	ldrex	r3, [r3]
 8002a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	330c      	adds	r3, #12
 8002a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a58:	643a      	str	r2, [r7, #64]	; 0x40
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a60:	e841 2300 	strex	r3, r2, [r1]
 8002a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1e5      	bne.n	8002a38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3314      	adds	r3, #20
 8002a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	e853 3f00 	ldrex	r3, [r3]
 8002a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3314      	adds	r3, #20
 8002a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a94:	e841 2300 	strex	r3, r2, [r1]
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e5      	bne.n	8002a6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d119      	bne.n	8002adc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	e853 3f00 	ldrex	r3, [r3]
 8002ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f023 0310 	bic.w	r3, r3, #16
 8002abe:	647b      	str	r3, [r7, #68]	; 0x44
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	330c      	adds	r3, #12
 8002ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ac8:	61ba      	str	r2, [r7, #24]
 8002aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002acc:	6979      	ldr	r1, [r7, #20]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	e841 2300 	strex	r3, r2, [r1]
 8002ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e5      	bne.n	8002aa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002aea:	bf00      	nop
 8002aec:	3754      	adds	r7, #84	; 0x54
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7ff ff7a 	bl	8002a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b21      	cmp	r3, #33	; 0x21
 8002b2e:	d13e      	bne.n	8002bae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b38:	d114      	bne.n	8002b64 <UART_Transmit_IT+0x48>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d110      	bne.n	8002b64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	1c9a      	adds	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	621a      	str	r2, [r3, #32]
 8002b62:	e008      	b.n	8002b76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	1c59      	adds	r1, r3, #1
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6211      	str	r1, [r2, #32]
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4619      	mov	r1, r3
 8002b84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e000      	b.n	8002bb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bae:	2302      	movs	r3, #2
  }
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ff02 	bl	80029e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b08c      	sub	sp, #48	; 0x30
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b22      	cmp	r3, #34	; 0x22
 8002bfc:	f040 80ae 	bne.w	8002d5c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c08:	d117      	bne.n	8002c3a <UART_Receive_IT+0x50>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d113      	bne.n	8002c3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	1c9a      	adds	r2, r3, #2
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28
 8002c38:	e026      	b.n	8002c88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4c:	d007      	beq.n	8002c5e <UART_Receive_IT+0x74>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <UART_Receive_IT+0x82>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e008      	b.n	8002c7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4619      	mov	r1, r3
 8002c96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d15d      	bne.n	8002d58 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0220 	bic.w	r2, r2, #32
 8002caa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d135      	bne.n	8002d4e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f023 0310 	bic.w	r3, r3, #16
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d08:	623a      	str	r2, [r7, #32]
 8002d0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0c:	69f9      	ldr	r1, [r7, #28]
 8002d0e:	6a3a      	ldr	r2, [r7, #32]
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e5      	bne.n	8002ce8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d10a      	bne.n	8002d40 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff fe67 	bl	8002a1a <HAL_UARTEx_RxEventCallback>
 8002d4c:	e002      	b.n	8002d54 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff fe51 	bl	80029f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e002      	b.n	8002d5e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3730      	adds	r7, #48	; 0x30
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002da2:	f023 030c 	bic.w	r3, r3, #12
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2c      	ldr	r2, [pc, #176]	; (8002e7c <UART_SetConfig+0x114>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d103      	bne.n	8002dd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dd0:	f7ff fabe 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	e002      	b.n	8002dde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dd8:	f7ff faa6 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8002ddc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009a      	lsls	r2, r3, #2
 8002de8:	441a      	add	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <UART_SetConfig+0x118>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	0119      	lsls	r1, r3, #4
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	009a      	lsls	r2, r3, #2
 8002e08:	441a      	add	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <UART_SetConfig+0x118>)
 8002e16:	fba3 0302 	umull	r0, r3, r3, r2
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2064      	movs	r0, #100	; 0x64
 8002e1e:	fb00 f303 	mul.w	r3, r0, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	3332      	adds	r3, #50	; 0x32
 8002e28:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <UART_SetConfig+0x118>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e34:	4419      	add	r1, r3
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009a      	lsls	r2, r3, #2
 8002e40:	441a      	add	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <UART_SetConfig+0x118>)
 8002e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2064      	movs	r0, #100	; 0x64
 8002e56:	fb00 f303 	mul.w	r3, r0, r3
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	3332      	adds	r3, #50	; 0x32
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <UART_SetConfig+0x118>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	f003 020f 	and.w	r2, r3, #15
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	440a      	add	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	51eb851f 	.word	0x51eb851f

08002e84 <memset>:
 8002e84:	4603      	mov	r3, r0
 8002e86:	4402      	add	r2, r0
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d100      	bne.n	8002e8e <memset+0xa>
 8002e8c:	4770      	bx	lr
 8002e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e92:	e7f9      	b.n	8002e88 <memset+0x4>

08002e94 <__libc_init_array>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	2600      	movs	r6, #0
 8002e98:	4d0c      	ldr	r5, [pc, #48]	; (8002ecc <__libc_init_array+0x38>)
 8002e9a:	4c0d      	ldr	r4, [pc, #52]	; (8002ed0 <__libc_init_array+0x3c>)
 8002e9c:	1b64      	subs	r4, r4, r5
 8002e9e:	10a4      	asrs	r4, r4, #2
 8002ea0:	42a6      	cmp	r6, r4
 8002ea2:	d109      	bne.n	8002eb8 <__libc_init_array+0x24>
 8002ea4:	f000 f81a 	bl	8002edc <_init>
 8002ea8:	2600      	movs	r6, #0
 8002eaa:	4d0a      	ldr	r5, [pc, #40]	; (8002ed4 <__libc_init_array+0x40>)
 8002eac:	4c0a      	ldr	r4, [pc, #40]	; (8002ed8 <__libc_init_array+0x44>)
 8002eae:	1b64      	subs	r4, r4, r5
 8002eb0:	10a4      	asrs	r4, r4, #2
 8002eb2:	42a6      	cmp	r6, r4
 8002eb4:	d105      	bne.n	8002ec2 <__libc_init_array+0x2e>
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebc:	4798      	blx	r3
 8002ebe:	3601      	adds	r6, #1
 8002ec0:	e7ee      	b.n	8002ea0 <__libc_init_array+0xc>
 8002ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec6:	4798      	blx	r3
 8002ec8:	3601      	adds	r6, #1
 8002eca:	e7f2      	b.n	8002eb2 <__libc_init_array+0x1e>
 8002ecc:	08002f28 	.word	0x08002f28
 8002ed0:	08002f28 	.word	0x08002f28
 8002ed4:	08002f28 	.word	0x08002f28
 8002ed8:	08002f2c 	.word	0x08002f2c

08002edc <_init>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	bf00      	nop
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr

08002ee8 <_fini>:
 8002ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eea:	bf00      	nop
 8002eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eee:	bc08      	pop	{r3}
 8002ef0:	469e      	mov	lr, r3
 8002ef2:	4770      	bx	lr
