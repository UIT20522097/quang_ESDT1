
Lab3_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b9c  08002b9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b9c  08002b9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b9c  08002b9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b9c  08002b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ba0  08002ba0  00012ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002bb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002bb0  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008e6f  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001896  00000000  00000000  00028ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  0002a780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000600  00000000  00000000  0002af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001650a  00000000  00000000  0002b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000942e  00000000  00000000  00041a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080d14  00000000  00000000  0004ae90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f3c  00000000  00000000  000cbba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000cdae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b4c 	.word	0x08002b4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b4c 	.word	0x08002b4c

0800014c <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE BEGIN 0 */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8000154:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000158:	4827      	ldr	r0, [pc, #156]	; (80001f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800015a:	f001 fb6f 	bl	800183c <HAL_GPIO_TogglePin>
	 if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxBuffer) == HAL_OK) {
 800015e:	4b27      	ldr	r3, [pc, #156]	; (80001fc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000160:	4a27      	ldr	r2, [pc, #156]	; (8000200 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000162:	2100      	movs	r1, #0
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f000 fce1 	bl	8000b2c <HAL_CAN_GetRxMessage>
 800016a:	4603      	mov	r3, r0
 800016c:	2b00      	cmp	r3, #0
 800016e:	d13e      	bne.n	80001ee <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
	          // Kiểm tra xem có phải yêu cầu đ�?c dữ liệu không
	          if (rxBuffer[0]== 0x22)
 8000170:	4b22      	ldr	r3, [pc, #136]	; (80001fc <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	2b22      	cmp	r3, #34	; 0x22
 8000176:	d119      	bne.n	80001ac <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
	          {
	        	  uint8_t responseData[] = {0x62, 0x01, 0x23, 0x11, 0x11, 0x11};
 8000178:	4a22      	ldr	r2, [pc, #136]	; (8000204 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800017a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800017e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000182:	6018      	str	r0, [r3, #0]
 8000184:	3304      	adds	r3, #4
 8000186:	8019      	strh	r1, [r3, #0]
	        	  txHeader.StdId = 0x7A2;  // Respond to the tester
 8000188:	4b1f      	ldr	r3, [pc, #124]	; (8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800018a:	f240 72a2 	movw	r2, #1954	; 0x7a2
 800018e:	601a      	str	r2, [r3, #0]
	        	  txHeader.IDE = CAN_ID_STD;
 8000190:	4b1d      	ldr	r3, [pc, #116]	; (8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000192:	2200      	movs	r2, #0
 8000194:	609a      	str	r2, [r3, #8]
	        	  txHeader.DLC = sizeof(responseData);
 8000196:	4b1c      	ldr	r3, [pc, #112]	; (8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000198:	2206      	movs	r2, #6
 800019a:	611a      	str	r2, [r3, #16]
	        	  HAL_CAN_AddTxMessage(hcan, &txHeader, responseData, &canMailbox);
 800019c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80001a0:	4b1a      	ldr	r3, [pc, #104]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80001a2:	4919      	ldr	r1, [pc, #100]	; (8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80001a4:	6878      	ldr	r0, [r7, #4]
 80001a6:	f000 fbf2 	bl	800098e <HAL_CAN_AddTxMessage>
	        	  txHeader.IDE = CAN_ID_STD;
	        	  txHeader.DLC = sizeof(negativeResponse);
	        	  HAL_CAN_AddTxMessage(hcan, &txHeader, negativeResponse, &canMailbox);
	          }
	 }
}
 80001aa:	e020      	b.n	80001ee <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
	        	  uint8_t negativeResponse[] = {0x7F, 0x22, 0x13};  // Invalid length/response format
 80001ac:	4a18      	ldr	r2, [pc, #96]	; (8000210 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80001ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001b2:	6812      	ldr	r2, [r2, #0]
 80001b4:	4611      	mov	r1, r2
 80001b6:	8019      	strh	r1, [r3, #0]
 80001b8:	3302      	adds	r3, #2
 80001ba:	0c12      	lsrs	r2, r2, #16
 80001bc:	701a      	strb	r2, [r3, #0]
	        	  CAN_TxHeaderTypeDef txHeader = {0};
 80001be:	f107 030c 	add.w	r3, r7, #12
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]
 80001ce:	615a      	str	r2, [r3, #20]
	        	  txHeader.StdId = 0x7A2;  // Respond to the tester
 80001d0:	f240 73a2 	movw	r3, #1954	; 0x7a2
 80001d4:	60fb      	str	r3, [r7, #12]
	        	  txHeader.IDE = CAN_ID_STD;
 80001d6:	2300      	movs	r3, #0
 80001d8:	617b      	str	r3, [r7, #20]
	        	  txHeader.DLC = sizeof(negativeResponse);
 80001da:	2303      	movs	r3, #3
 80001dc:	61fb      	str	r3, [r7, #28]
	        	  HAL_CAN_AddTxMessage(hcan, &txHeader, negativeResponse, &canMailbox);
 80001de:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80001e2:	f107 010c 	add.w	r1, r7, #12
 80001e6:	4b09      	ldr	r3, [pc, #36]	; (800020c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80001e8:	6878      	ldr	r0, [r7, #4]
 80001ea:	f000 fbd0 	bl	800098e <HAL_CAN_AddTxMessage>
}
 80001ee:	bf00      	nop
 80001f0:	3730      	adds	r7, #48	; 0x30
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010c00 	.word	0x40010c00
 80001fc:	200000f8 	.word	0x200000f8
 8000200:	20000098 	.word	0x20000098
 8000204:	08002b64 	.word	0x08002b64
 8000208:	200000b4 	.word	0x200000b4
 800020c:	200000f4 	.word	0x200000f4
 8000210:	08002b6c 	.word	0x08002b6c

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	canfil.FilterBank = 10;
 8000218:	4b15      	ldr	r3, [pc, #84]	; (8000270 <main+0x5c>)
 800021a:	220a      	movs	r2, #10
 800021c:	615a      	str	r2, [r3, #20]
	canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800021e:	4b14      	ldr	r3, [pc, #80]	; (8000270 <main+0x5c>)
 8000220:	2200      	movs	r2, #0
 8000222:	619a      	str	r2, [r3, #24]
	canfil.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000224:	4b12      	ldr	r3, [pc, #72]	; (8000270 <main+0x5c>)
 8000226:	2200      	movs	r2, #0
 8000228:	611a      	str	r2, [r3, #16]
	canfil.FilterIdHigh = 0x7A2<<5;
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <main+0x5c>)
 800022c:	f24f 4240 	movw	r2, #62528	; 0xf440
 8000230:	601a      	str	r2, [r3, #0]
	canfil.FilterIdLow = 0;
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <main+0x5c>)
 8000234:	2200      	movs	r2, #0
 8000236:	605a      	str	r2, [r3, #4]
	canfil.FilterMaskIdHigh = 0x7A2<<5;
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <main+0x5c>)
 800023a:	f24f 4240 	movw	r2, #62528	; 0xf440
 800023e:	609a      	str	r2, [r3, #8]
	canfil.FilterMaskIdLow = 0x0000;
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <main+0x5c>)
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
	canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <main+0x5c>)
 8000248:	2201      	movs	r2, #1
 800024a:	61da      	str	r2, [r3, #28]
	canfil.FilterActivation = CAN_FILTER_ENABLE;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <main+0x5c>)
 800024e:	2201      	movs	r2, #1
 8000250:	621a      	str	r2, [r3, #32]
	canfil.SlaveStartFilterBank = 0;
 8000252:	4b07      	ldr	r3, [pc, #28]	; (8000270 <main+0x5c>)
 8000254:	2200      	movs	r2, #0
 8000256:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 fa3c 	bl	80006d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f80a 	bl	8000274 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000260:	f000 f8ae 	bl	80003c0 <MX_GPIO_Init>
  MX_CAN_Init();
 8000264:	f000 f84c 	bl	8000300 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000268:	f000 f880 	bl	800036c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026c:	e7fe      	b.n	800026c <main+0x58>
 800026e:	bf00      	nop
 8000270:	200000cc 	.word	0x200000cc

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b090      	sub	sp, #64	; 0x40
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2228      	movs	r2, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fc36 	bl	8002af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000296:	2301      	movs	r3, #1
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	2301      	movs	r3, #1
 80002a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a8:	2302      	movs	r3, #2
 80002aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	f107 0318 	add.w	r3, r7, #24
 80002bc:	4618      	mov	r0, r3
 80002be:	f001 fad7 	bl	8001870 <HAL_RCC_OscConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c8:	f000 f8bc 	bl	8000444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	230f      	movs	r3, #15
 80002ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d0:	2302      	movs	r3, #2
 80002d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2102      	movs	r1, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fd44 	bl	8001d74 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002f2:	f000 f8a7 	bl	8000444 <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3740      	adds	r7, #64	; 0x40
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <MX_CAN_Init+0x64>)
 8000306:	4a18      	ldr	r2, [pc, #96]	; (8000368 <MX_CAN_Init+0x68>)
 8000308:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800030a:	4b16      	ldr	r3, [pc, #88]	; (8000364 <MX_CAN_Init+0x64>)
 800030c:	2204      	movs	r2, #4
 800030e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_CAN_Init+0x64>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <MX_CAN_Init+0x64>)
 8000318:	2200      	movs	r2, #0
 800031a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_CAN_Init+0x64>)
 800031e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000322:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_CAN_Init+0x64>)
 8000326:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800032a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <MX_CAN_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_CAN_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <MX_CAN_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_CAN_Init+0x64>)
 8000340:	2200      	movs	r2, #0
 8000342:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <MX_CAN_Init+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_CAN_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000350:	4804      	ldr	r0, [pc, #16]	; (8000364 <MX_CAN_Init+0x64>)
 8000352:	f000 fa21 	bl	8000798 <HAL_CAN_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800035c:	f000 f872 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000028 	.word	0x20000028
 8000368:	40006400 	.word	0x40006400

0800036c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <MX_USART1_UART_Init+0x50>)
 8000374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800037c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 80003a4:	f001 fe74 	bl	8002090 <HAL_UART_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ae:	f000 f849 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000050 	.word	0x20000050
 80003bc:	40013800 	.word	0x40013800

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d4:	4b19      	ldr	r3, [pc, #100]	; (800043c <MX_GPIO_Init+0x7c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a18      	ldr	r2, [pc, #96]	; (800043c <MX_GPIO_Init+0x7c>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <MX_GPIO_Init+0x7c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0320 	and.w	r3, r3, #32
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_GPIO_Init+0x7c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a12      	ldr	r2, [pc, #72]	; (800043c <MX_GPIO_Init+0x7c>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_GPIO_Init+0x7c>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <MX_GPIO_Init+0x7c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a0c      	ldr	r2, [pc, #48]	; (800043c <MX_GPIO_Init+0x7c>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <MX_GPIO_Init+0x7c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0308 	and.w	r3, r3, #8
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800041c:	2310      	movs	r3, #16
 800041e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_GPIO_Init+0x80>)
 8000430:	f001 f880 	bl	8001534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000434:	bf00      	nop
 8000436:	3720      	adds	r7, #32
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000
 8000440:	40010c00 	.word	0x40010c00

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	e7fe      	b.n	800044c <Error_Handler+0x8>
	...

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <HAL_MspInit+0x5c>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a14      	ldr	r2, [pc, #80]	; (80004ac <HAL_MspInit+0x5c>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <HAL_MspInit+0x5c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <HAL_MspInit+0x5c>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <HAL_MspInit+0x5c>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000478:	61d3      	str	r3, [r2, #28]
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_MspInit+0x5c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000486:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <HAL_MspInit+0x60>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <HAL_MspInit+0x60>)
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40010000 	.word	0x40010000

080004b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a20      	ldr	r2, [pc, #128]	; (8000550 <HAL_CAN_MspInit+0x9c>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d139      	bne.n	8000548 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004d4:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004de:	61d3      	str	r3, [r2, #28]
 80004e0:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b19      	ldr	r3, [pc, #100]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a18      	ldr	r2, [pc, #96]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <HAL_CAN_MspInit+0xa0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000504:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	4619      	mov	r1, r3
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <HAL_CAN_MspInit+0xa4>)
 800051a:	f001 f80b 	bl	8001534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800051e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000524:	2302      	movs	r3, #2
 8000526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000528:	2303      	movs	r3, #3
 800052a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <HAL_CAN_MspInit+0xa4>)
 8000534:	f000 fffe 	bl	8001534 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000538:	2200      	movs	r2, #0
 800053a:	2100      	movs	r1, #0
 800053c:	2014      	movs	r0, #20
 800053e:	f000 ff10 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000542:	2014      	movs	r0, #20
 8000544:	f000 ff29 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40006400 	.word	0x40006400
 8000554:	40021000 	.word	0x40021000
 8000558:	40010800 	.word	0x40010800

0800055c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <HAL_UART_MspInit+0x9c>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d139      	bne.n	80005f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <HAL_UART_MspInit+0xa0>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a1e      	ldr	r2, [pc, #120]	; (80005fc <HAL_UART_MspInit+0xa0>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <HAL_UART_MspInit+0xa0>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <HAL_UART_MspInit+0xa0>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a18      	ldr	r2, [pc, #96]	; (80005fc <HAL_UART_MspInit+0xa0>)
 800059a:	f043 0304 	orr.w	r3, r3, #4
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <HAL_UART_MspInit+0xa0>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b6:	2303      	movs	r3, #3
 80005b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	480f      	ldr	r0, [pc, #60]	; (8000600 <HAL_UART_MspInit+0xa4>)
 80005c2:	f000 ffb7 	bl	8001534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <HAL_UART_MspInit+0xa4>)
 80005dc:	f000 ffaa 	bl	8001534 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2100      	movs	r1, #0
 80005e4:	2025      	movs	r0, #37	; 0x25
 80005e6:	f000 febc 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005ea:	2025      	movs	r0, #37	; 0x25
 80005ec:	f000 fed5 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40013800 	.word	0x40013800
 80005fc:	40021000 	.word	0x40021000
 8000600:	40010800 	.word	0x40010800

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <NMI_Handler+0x4>

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <MemManage_Handler+0x4>

08000616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <BusFault_Handler+0x4>

0800061c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <UsageFault_Handler+0x4>

08000622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr

0800063a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064a:	f000 f889 	bl	8000760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800065a:	f000 fb88 	bl	8000d6e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000028 	.word	0x20000028

08000668 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800066c:	4802      	ldr	r0, [pc, #8]	; (8000678 <USART1_IRQHandler+0x10>)
 800066e:	f001 fd5f 	bl	8002130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000050 	.word	0x20000050

0800067c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000688:	f7ff fff8 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800068e:	490c      	ldr	r1, [pc, #48]	; (80006c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006a4:	4c09      	ldr	r4, [pc, #36]	; (80006cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b2:	f002 fa27 	bl	8002b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff fdad 	bl	8000214 <main>
  bx lr
 80006ba:	4770      	bx	lr
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c4:	08002ba4 	.word	0x08002ba4
  ldr r2, =_sbss
 80006c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006cc:	20000104 	.word	0x20000104

080006d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_2_IRQHandler>
	...

080006d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <HAL_Init+0x28>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_Init+0x28>)
 80006de:	f043 0310 	orr.w	r3, r3, #16
 80006e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 fe31 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ea:	200f      	movs	r0, #15
 80006ec:	f000 f808 	bl	8000700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f0:	f7ff feae 	bl	8000450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40022000 	.word	0x40022000

08000700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_InitTick+0x54>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_InitTick+0x58>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	fbb3 f3f1 	udiv	r3, r3, r1
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fe49 	bl	80013b6 <HAL_SYSTICK_Config>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	e00e      	b.n	800074c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d80a      	bhi.n	800074a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000734:	2200      	movs	r2, #0
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f000 fe11 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <HAL_InitTick+0x5c>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000746:	2300      	movs	r3, #0
 8000748:	e000      	b.n	800074c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000000 	.word	0x20000000
 8000758:	20000008 	.word	0x20000008
 800075c:	20000004 	.word	0x20000004

08000760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_IncTick+0x1c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_IncTick+0x20>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a03      	ldr	r2, [pc, #12]	; (8000780 <HAL_IncTick+0x20>)
 8000772:	6013      	str	r3, [r2, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	20000008 	.word	0x20000008
 8000780:	20000100 	.word	0x20000100

08000784 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return uwTick;
 8000788:	4b02      	ldr	r3, [pc, #8]	; (8000794 <HAL_GetTick+0x10>)
 800078a:	681b      	ldr	r3, [r3, #0]
}
 800078c:	4618      	mov	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	20000100 	.word	0x20000100

08000798 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d101      	bne.n	80007aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e0ed      	b.n	8000986 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d102      	bne.n	80007bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fe7c 	bl	80004b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f042 0201 	orr.w	r2, r2, #1
 80007ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007cc:	f7ff ffda 	bl	8000784 <HAL_GetTick>
 80007d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007d2:	e012      	b.n	80007fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007d4:	f7ff ffd6 	bl	8000784 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	2b0a      	cmp	r3, #10
 80007e0:	d90b      	bls.n	80007fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2205      	movs	r2, #5
 80007f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e0c5      	b.n	8000986 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0e5      	beq.n	80007d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f022 0202 	bic.w	r2, r2, #2
 8000816:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000818:	f7ff ffb4 	bl	8000784 <HAL_GetTick>
 800081c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800081e:	e012      	b.n	8000846 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000820:	f7ff ffb0 	bl	8000784 <HAL_GetTick>
 8000824:	4602      	mov	r2, r0
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	2b0a      	cmp	r3, #10
 800082c:	d90b      	bls.n	8000846 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000832:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2205      	movs	r2, #5
 800083e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e09f      	b.n	8000986 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 0302 	and.w	r3, r3, #2
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1e5      	bne.n	8000820 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7e1b      	ldrb	r3, [r3, #24]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d108      	bne.n	800086e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	e007      	b.n	800087e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	7e5b      	ldrb	r3, [r3, #25]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d108      	bne.n	8000898 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	e007      	b.n	80008a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80008a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7e9b      	ldrb	r3, [r3, #26]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d108      	bne.n	80008c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f042 0220 	orr.w	r2, r2, #32
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	e007      	b.n	80008d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f022 0220 	bic.w	r2, r2, #32
 80008d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7edb      	ldrb	r3, [r3, #27]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d108      	bne.n	80008ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f022 0210 	bic.w	r2, r2, #16
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	e007      	b.n	80008fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f042 0210 	orr.w	r2, r2, #16
 80008fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7f1b      	ldrb	r3, [r3, #28]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d108      	bne.n	8000916 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f042 0208 	orr.w	r2, r2, #8
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	e007      	b.n	8000926 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f022 0208 	bic.w	r2, r2, #8
 8000924:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7f5b      	ldrb	r3, [r3, #29]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d108      	bne.n	8000940 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f042 0204 	orr.w	r2, r2, #4
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	e007      	b.n	8000950 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f022 0204 	bic.w	r2, r2, #4
 800094e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	431a      	orrs	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	431a      	orrs	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	ea42 0103 	orr.w	r1, r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	1e5a      	subs	r2, r3, #1
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	430a      	orrs	r2, r1
 8000974:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2201      	movs	r2, #1
 8000980:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800098e:	b480      	push	{r7}
 8000990:	b089      	sub	sp, #36	; 0x24
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80009ac:	7ffb      	ldrb	r3, [r7, #31]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d003      	beq.n	80009ba <HAL_CAN_AddTxMessage+0x2c>
 80009b2:	7ffb      	ldrb	r3, [r7, #31]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	f040 80ad 	bne.w	8000b14 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10a      	bne.n	80009da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d105      	bne.n	80009da <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f000 8095 	beq.w	8000b04 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	0e1b      	lsrs	r3, r3, #24
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80009e4:	2201      	movs	r2, #1
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	409a      	lsls	r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10d      	bne.n	8000a12 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a00:	68f9      	ldr	r1, [r7, #12]
 8000a02:	6809      	ldr	r1, [r1, #0]
 8000a04:	431a      	orrs	r2, r3
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3318      	adds	r3, #24
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	440b      	add	r3, r1
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	e00f      	b.n	8000a32 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a1c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a22:	68f9      	ldr	r1, [r7, #12]
 8000a24:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000a26:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3318      	adds	r3, #24
 8000a2c:	011b      	lsls	r3, r3, #4
 8000a2e:	440b      	add	r3, r1
 8000a30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6819      	ldr	r1, [r3, #0]
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	691a      	ldr	r2, [r3, #16]
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	3318      	adds	r3, #24
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	440b      	add	r3, r1
 8000a42:	3304      	adds	r3, #4
 8000a44:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	7d1b      	ldrb	r3, [r3, #20]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d111      	bne.n	8000a72 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3318      	adds	r3, #24
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	4413      	add	r3, r2
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	6811      	ldr	r1, [r2, #0]
 8000a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3318      	adds	r3, #24
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3304      	adds	r3, #4
 8000a70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3307      	adds	r3, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	061a      	lsls	r2, r3, #24
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3306      	adds	r3, #6
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	041b      	lsls	r3, r3, #16
 8000a82:	431a      	orrs	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3305      	adds	r3, #5
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	3204      	adds	r2, #4
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	4610      	mov	r0, r2
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	6811      	ldr	r1, [r2, #0]
 8000a9a:	ea43 0200 	orr.w	r2, r3, r0
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	011b      	lsls	r3, r3, #4
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000aa8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3303      	adds	r3, #3
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	061a      	lsls	r2, r3, #24
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	041b      	lsls	r3, r3, #16
 8000aba:	431a      	orrs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	4610      	mov	r0, r2
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	6811      	ldr	r1, [r2, #0]
 8000ad0:	ea43 0200 	orr.w	r2, r3, r0
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	440b      	add	r3, r1
 8000ada:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ade:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3318      	adds	r3, #24
 8000ae8:	011b      	lsls	r3, r3, #4
 8000aea:	4413      	add	r3, r2
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	6811      	ldr	r1, [r2, #0]
 8000af2:	f043 0201 	orr.w	r2, r3, #1
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3318      	adds	r3, #24
 8000afa:	011b      	lsls	r3, r3, #4
 8000afc:	440b      	add	r3, r1
 8000afe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	e00e      	b.n	8000b22 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e006      	b.n	8000b22 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
  }
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b087      	sub	sp, #28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b40:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d003      	beq.n	8000b50 <HAL_CAN_GetRxMessage+0x24>
 8000b48:	7dfb      	ldrb	r3, [r7, #23]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	f040 8103 	bne.w	8000d56 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10e      	bne.n	8000b74 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d116      	bne.n	8000b92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	e0f7      	b.n	8000d64 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d107      	bne.n	8000b92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e0e8      	b.n	8000d64 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	331b      	adds	r3, #27
 8000b9a:	011b      	lsls	r3, r3, #4
 8000b9c:	4413      	add	r3, r2
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 0204 	and.w	r2, r3, #4
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10c      	bne.n	8000bca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	331b      	adds	r3, #27
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	4413      	add	r3, r2
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	0d5b      	lsrs	r3, r3, #21
 8000bc0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	e00b      	b.n	8000be2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	331b      	adds	r3, #27
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	4413      	add	r3, r2
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	08db      	lsrs	r3, r3, #3
 8000bda:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	331b      	adds	r3, #27
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	4413      	add	r3, r2
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0202 	and.w	r2, r3, #2
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	331b      	adds	r3, #27
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	4413      	add	r3, r2
 8000c04:	3304      	adds	r3, #4
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2208      	movs	r2, #8
 8000c14:	611a      	str	r2, [r3, #16]
 8000c16:	e00b      	b.n	8000c30 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	331b      	adds	r3, #27
 8000c20:	011b      	lsls	r3, r3, #4
 8000c22:	4413      	add	r3, r2
 8000c24:	3304      	adds	r3, #4
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 020f 	and.w	r2, r3, #15
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	331b      	adds	r3, #27
 8000c38:	011b      	lsls	r3, r3, #4
 8000c3a:	4413      	add	r3, r2
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	331b      	adds	r3, #27
 8000c50:	011b      	lsls	r3, r3, #4
 8000c52:	4413      	add	r3, r2
 8000c54:	3304      	adds	r3, #4
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	0c1b      	lsrs	r3, r3, #16
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	011b      	lsls	r3, r3, #4
 8000c68:	4413      	add	r3, r2
 8000c6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	4413      	add	r3, r2
 8000c80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	0a1a      	lsrs	r2, r3, #8
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	4413      	add	r3, r2
 8000c9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	0c1a      	lsrs	r2, r3, #16
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	011b      	lsls	r3, r3, #4
 8000cb2:	4413      	add	r3, r2
 8000cb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	0e1a      	lsrs	r2, r3, #24
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	3303      	adds	r3, #3
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	4413      	add	r3, r2
 8000cce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0a1a      	lsrs	r2, r3, #8
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	3305      	adds	r3, #5
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	4413      	add	r3, r2
 8000d00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	0c1a      	lsrs	r2, r3, #16
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	3306      	adds	r3, #6
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	4413      	add	r3, r2
 8000d1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	0e1a      	lsrs	r2, r3, #24
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	3307      	adds	r3, #7
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d108      	bne.n	8000d42 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 0220 	orr.w	r2, r2, #32
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	e007      	b.n	8000d52 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	691a      	ldr	r2, [r3, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f042 0220 	orr.w	r2, r2, #32
 8000d50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e006      	b.n	8000d64 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
  }
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	371c      	adds	r7, #28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b08a      	sub	sp, #40	; 0x28
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000daa:	6a3b      	ldr	r3, [r7, #32]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d07c      	beq.n	8000eae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d023      	beq.n	8000e06 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 f983 	bl	80010dc <HAL_CAN_TxMailbox0CompleteCallback>
 8000dd6:	e016      	b.n	8000e06 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
 8000dea:	e00c      	b.n	8000e06 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d004      	beq.n	8000e00 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dfe:	e002      	b.n	8000e06 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f986 	bl	8001112 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d024      	beq.n	8000e5a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f962 	bl	80010ee <HAL_CAN_TxMailbox1CompleteCallback>
 8000e2a:	e016      	b.n	8000e5a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d004      	beq.n	8000e40 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3e:	e00c      	b.n	8000e5a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
 8000e52:	e002      	b.n	8000e5a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f965 	bl	8001124 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d024      	beq.n	8000eae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f941 	bl	8001100 <HAL_CAN_TxMailbox2CompleteCallback>
 8000e7e:	e016      	b.n	8000eae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d004      	beq.n	8000e94 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
 8000e92:	e00c      	b.n	8000eae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d004      	beq.n	8000ea8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea6:	e002      	b.n	8000eae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f944 	bl	8001136 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000eae:	6a3b      	ldr	r3, [r7, #32]
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00c      	beq.n	8000ed2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d007      	beq.n	8000ed2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2210      	movs	r2, #16
 8000ed0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00b      	beq.n	8000ef4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2208      	movs	r2, #8
 8000eec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f92a 	bl	8001148 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d009      	beq.n	8000f12 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff f91d 	bl	800014c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00c      	beq.n	8000f36 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2210      	movs	r2, #16
 8000f34:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f36:	6a3b      	ldr	r3, [r7, #32]
 8000f38:	f003 0320 	and.w	r3, r3, #32
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00b      	beq.n	8000f58 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d006      	beq.n	8000f58 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2208      	movs	r2, #8
 8000f50:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f90a 	bl	800116c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d009      	beq.n	8000f76 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f8f2 	bl	800115a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2210      	movs	r2, #16
 8000f90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f8f3 	bl	800117e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00b      	beq.n	8000fba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d006      	beq.n	8000fba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 f8eb 	bl	8001190 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d07b      	beq.n	80010bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d072      	beq.n	80010b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d008      	beq.n	8000fea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d008      	beq.n	8001006 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100c:	2b00      	cmp	r3, #0
 800100e:	d008      	beq.n	8001022 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001028:	2b00      	cmp	r3, #0
 800102a:	d043      	beq.n	80010b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001032:	2b00      	cmp	r3, #0
 8001034:	d03e      	beq.n	80010b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800103c:	2b60      	cmp	r3, #96	; 0x60
 800103e:	d02b      	beq.n	8001098 <HAL_CAN_IRQHandler+0x32a>
 8001040:	2b60      	cmp	r3, #96	; 0x60
 8001042:	d82e      	bhi.n	80010a2 <HAL_CAN_IRQHandler+0x334>
 8001044:	2b50      	cmp	r3, #80	; 0x50
 8001046:	d022      	beq.n	800108e <HAL_CAN_IRQHandler+0x320>
 8001048:	2b50      	cmp	r3, #80	; 0x50
 800104a:	d82a      	bhi.n	80010a2 <HAL_CAN_IRQHandler+0x334>
 800104c:	2b40      	cmp	r3, #64	; 0x40
 800104e:	d019      	beq.n	8001084 <HAL_CAN_IRQHandler+0x316>
 8001050:	2b40      	cmp	r3, #64	; 0x40
 8001052:	d826      	bhi.n	80010a2 <HAL_CAN_IRQHandler+0x334>
 8001054:	2b30      	cmp	r3, #48	; 0x30
 8001056:	d010      	beq.n	800107a <HAL_CAN_IRQHandler+0x30c>
 8001058:	2b30      	cmp	r3, #48	; 0x30
 800105a:	d822      	bhi.n	80010a2 <HAL_CAN_IRQHandler+0x334>
 800105c:	2b10      	cmp	r3, #16
 800105e:	d002      	beq.n	8001066 <HAL_CAN_IRQHandler+0x2f8>
 8001060:	2b20      	cmp	r3, #32
 8001062:	d005      	beq.n	8001070 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001064:	e01d      	b.n	80010a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800106e:	e019      	b.n	80010a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001078:	e014      	b.n	80010a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	f043 0320 	orr.w	r3, r3, #32
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001082:	e00f      	b.n	80010a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800108c:	e00a      	b.n	80010a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001096:	e005      	b.n	80010a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010a0:	e000      	b.n	80010a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80010a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	699a      	ldr	r2, [r3, #24]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2204      	movs	r2, #4
 80010ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d008      	beq.n	80010d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f867 	bl	80011a2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4906      	ldr	r1, [pc, #24]	; (800124c <__NVIC_EnableIRQ+0x34>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff90 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff2d 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff42 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff90 	bl	80012a4 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff35 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d008      	beq.n	80013f8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2204      	movs	r2, #4
 80013ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e020      	b.n	800143a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 020e 	bic.w	r2, r2, #14
 8001406:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0201 	bic.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f202 	lsl.w	r2, r1, r2
 8001426:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001438:	7bfb      	ldrb	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d005      	beq.n	8001468 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2204      	movs	r2, #4
 8001460:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e051      	b.n	800150c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 020e 	bic.w	r2, r2, #14
 8001476:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a22      	ldr	r2, [pc, #136]	; (8001518 <HAL_DMA_Abort_IT+0xd4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d029      	beq.n	80014e6 <HAL_DMA_Abort_IT+0xa2>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a21      	ldr	r2, [pc, #132]	; (800151c <HAL_DMA_Abort_IT+0xd8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d022      	beq.n	80014e2 <HAL_DMA_Abort_IT+0x9e>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <HAL_DMA_Abort_IT+0xdc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d01a      	beq.n	80014dc <HAL_DMA_Abort_IT+0x98>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <HAL_DMA_Abort_IT+0xe0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d012      	beq.n	80014d6 <HAL_DMA_Abort_IT+0x92>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <HAL_DMA_Abort_IT+0xe4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00a      	beq.n	80014d0 <HAL_DMA_Abort_IT+0x8c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_DMA_Abort_IT+0xe8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d102      	bne.n	80014ca <HAL_DMA_Abort_IT+0x86>
 80014c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014c8:	e00e      	b.n	80014e8 <HAL_DMA_Abort_IT+0xa4>
 80014ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014ce:	e00b      	b.n	80014e8 <HAL_DMA_Abort_IT+0xa4>
 80014d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d4:	e008      	b.n	80014e8 <HAL_DMA_Abort_IT+0xa4>
 80014d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014da:	e005      	b.n	80014e8 <HAL_DMA_Abort_IT+0xa4>
 80014dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e0:	e002      	b.n	80014e8 <HAL_DMA_Abort_IT+0xa4>
 80014e2:	2310      	movs	r3, #16
 80014e4:	e000      	b.n	80014e8 <HAL_DMA_Abort_IT+0xa4>
 80014e6:	2301      	movs	r3, #1
 80014e8:	4a11      	ldr	r2, [pc, #68]	; (8001530 <HAL_DMA_Abort_IT+0xec>)
 80014ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	4798      	blx	r3
    } 
  }
  return status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40020008 	.word	0x40020008
 800151c:	4002001c 	.word	0x4002001c
 8001520:	40020030 	.word	0x40020030
 8001524:	40020044 	.word	0x40020044
 8001528:	40020058 	.word	0x40020058
 800152c:	4002006c 	.word	0x4002006c
 8001530:	40020000 	.word	0x40020000

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b08b      	sub	sp, #44	; 0x2c
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001546:	e169      	b.n	800181c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001548:	2201      	movs	r2, #1
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	429a      	cmp	r2, r3
 8001562:	f040 8158 	bne.w	8001816 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4a9a      	ldr	r2, [pc, #616]	; (80017d4 <HAL_GPIO_Init+0x2a0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d05e      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 8001570:	4a98      	ldr	r2, [pc, #608]	; (80017d4 <HAL_GPIO_Init+0x2a0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d875      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 8001576:	4a98      	ldr	r2, [pc, #608]	; (80017d8 <HAL_GPIO_Init+0x2a4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d058      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 800157c:	4a96      	ldr	r2, [pc, #600]	; (80017d8 <HAL_GPIO_Init+0x2a4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d86f      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 8001582:	4a96      	ldr	r2, [pc, #600]	; (80017dc <HAL_GPIO_Init+0x2a8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d052      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 8001588:	4a94      	ldr	r2, [pc, #592]	; (80017dc <HAL_GPIO_Init+0x2a8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d869      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 800158e:	4a94      	ldr	r2, [pc, #592]	; (80017e0 <HAL_GPIO_Init+0x2ac>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d04c      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 8001594:	4a92      	ldr	r2, [pc, #584]	; (80017e0 <HAL_GPIO_Init+0x2ac>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d863      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 800159a:	4a92      	ldr	r2, [pc, #584]	; (80017e4 <HAL_GPIO_Init+0x2b0>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d046      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 80015a0:	4a90      	ldr	r2, [pc, #576]	; (80017e4 <HAL_GPIO_Init+0x2b0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d85d      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 80015a6:	2b12      	cmp	r3, #18
 80015a8:	d82a      	bhi.n	8001600 <HAL_GPIO_Init+0xcc>
 80015aa:	2b12      	cmp	r3, #18
 80015ac:	d859      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 80015ae:	a201      	add	r2, pc, #4	; (adr r2, 80015b4 <HAL_GPIO_Init+0x80>)
 80015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b4:	0800162f 	.word	0x0800162f
 80015b8:	08001609 	.word	0x08001609
 80015bc:	0800161b 	.word	0x0800161b
 80015c0:	0800165d 	.word	0x0800165d
 80015c4:	08001663 	.word	0x08001663
 80015c8:	08001663 	.word	0x08001663
 80015cc:	08001663 	.word	0x08001663
 80015d0:	08001663 	.word	0x08001663
 80015d4:	08001663 	.word	0x08001663
 80015d8:	08001663 	.word	0x08001663
 80015dc:	08001663 	.word	0x08001663
 80015e0:	08001663 	.word	0x08001663
 80015e4:	08001663 	.word	0x08001663
 80015e8:	08001663 	.word	0x08001663
 80015ec:	08001663 	.word	0x08001663
 80015f0:	08001663 	.word	0x08001663
 80015f4:	08001663 	.word	0x08001663
 80015f8:	08001611 	.word	0x08001611
 80015fc:	08001625 	.word	0x08001625
 8001600:	4a79      	ldr	r2, [pc, #484]	; (80017e8 <HAL_GPIO_Init+0x2b4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001606:	e02c      	b.n	8001662 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e029      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	3304      	adds	r3, #4
 8001616:	623b      	str	r3, [r7, #32]
          break;
 8001618:	e024      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	3308      	adds	r3, #8
 8001620:	623b      	str	r3, [r7, #32]
          break;
 8001622:	e01f      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	330c      	adds	r3, #12
 800162a:	623b      	str	r3, [r7, #32]
          break;
 800162c:	e01a      	b.n	8001664 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001636:	2304      	movs	r3, #4
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e013      	b.n	8001664 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001644:	2308      	movs	r3, #8
 8001646:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	611a      	str	r2, [r3, #16]
          break;
 800164e:	e009      	b.n	8001664 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001650:	2308      	movs	r3, #8
 8001652:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	615a      	str	r2, [r3, #20]
          break;
 800165a:	e003      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
          break;
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x130>
          break;
 8001662:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2bff      	cmp	r3, #255	; 0xff
 8001668:	d801      	bhi.n	800166e <HAL_GPIO_Init+0x13a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	e001      	b.n	8001672 <HAL_GPIO_Init+0x13e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3304      	adds	r3, #4
 8001672:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	d802      	bhi.n	8001680 <HAL_GPIO_Init+0x14c>
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	e002      	b.n	8001686 <HAL_GPIO_Init+0x152>
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	3b08      	subs	r3, #8
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	210f      	movs	r1, #15
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	401a      	ands	r2, r3
 8001698:	6a39      	ldr	r1, [r7, #32]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	431a      	orrs	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80b1 	beq.w	8001816 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016b4:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <HAL_GPIO_Init+0x2b8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_GPIO_Init+0x2b8>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_GPIO_Init+0x2b8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016cc:	4a48      	ldr	r2, [pc, #288]	; (80017f0 <HAL_GPIO_Init+0x2bc>)
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	3302      	adds	r3, #2
 80016d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	220f      	movs	r2, #15
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a40      	ldr	r2, [pc, #256]	; (80017f4 <HAL_GPIO_Init+0x2c0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d013      	beq.n	8001720 <HAL_GPIO_Init+0x1ec>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a3f      	ldr	r2, [pc, #252]	; (80017f8 <HAL_GPIO_Init+0x2c4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d00d      	beq.n	800171c <HAL_GPIO_Init+0x1e8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a3e      	ldr	r2, [pc, #248]	; (80017fc <HAL_GPIO_Init+0x2c8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d007      	beq.n	8001718 <HAL_GPIO_Init+0x1e4>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a3d      	ldr	r2, [pc, #244]	; (8001800 <HAL_GPIO_Init+0x2cc>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d101      	bne.n	8001714 <HAL_GPIO_Init+0x1e0>
 8001710:	2303      	movs	r3, #3
 8001712:	e006      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 8001714:	2304      	movs	r3, #4
 8001716:	e004      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 8001718:	2302      	movs	r3, #2
 800171a:	e002      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 8001720:	2300      	movs	r3, #0
 8001722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001724:	f002 0203 	and.w	r2, r2, #3
 8001728:	0092      	lsls	r2, r2, #2
 800172a:	4093      	lsls	r3, r2
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001732:	492f      	ldr	r1, [pc, #188]	; (80017f0 <HAL_GPIO_Init+0x2bc>)
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	492c      	ldr	r1, [pc, #176]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	608b      	str	r3, [r1, #8]
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	43db      	mvns	r3, r3
 8001762:	4928      	ldr	r1, [pc, #160]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001764:	4013      	ands	r3, r2
 8001766:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	4922      	ldr	r1, [pc, #136]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	60cb      	str	r3, [r1, #12]
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	43db      	mvns	r3, r3
 800178a:	491e      	ldr	r1, [pc, #120]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800178c:	4013      	ands	r3, r2
 800178e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4918      	ldr	r1, [pc, #96]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	4914      	ldr	r1, [pc, #80]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d021      	beq.n	8001808 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	490e      	ldr	r1, [pc, #56]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e021      	b.n	8001816 <HAL_GPIO_Init+0x2e2>
 80017d2:	bf00      	nop
 80017d4:	10320000 	.word	0x10320000
 80017d8:	10310000 	.word	0x10310000
 80017dc:	10220000 	.word	0x10220000
 80017e0:	10210000 	.word	0x10210000
 80017e4:	10120000 	.word	0x10120000
 80017e8:	10110000 	.word	0x10110000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010000 	.word	0x40010000
 80017f4:	40010800 	.word	0x40010800
 80017f8:	40010c00 	.word	0x40010c00
 80017fc:	40011000 	.word	0x40011000
 8001800:	40011400 	.word	0x40011400
 8001804:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_GPIO_Init+0x304>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	43db      	mvns	r3, r3
 8001810:	4909      	ldr	r1, [pc, #36]	; (8001838 <HAL_GPIO_Init+0x304>)
 8001812:	4013      	ands	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	3301      	adds	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	f47f ae8e 	bne.w	8001548 <HAL_GPIO_Init+0x14>
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	372c      	adds	r7, #44	; 0x2c
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40010400 	.word	0x40010400

0800183c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43d9      	mvns	r1, r3
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	400b      	ands	r3, r1
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	611a      	str	r2, [r3, #16]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
	...

08001870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e272      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8087 	beq.w	800199e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001890:	4b92      	ldr	r3, [pc, #584]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b04      	cmp	r3, #4
 800189a:	d00c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800189c:	4b8f      	ldr	r3, [pc, #572]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d112      	bne.n	80018ce <HAL_RCC_OscConfig+0x5e>
 80018a8:	4b8c      	ldr	r3, [pc, #560]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b4:	d10b      	bne.n	80018ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b6:	4b89      	ldr	r3, [pc, #548]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d06c      	beq.n	800199c <HAL_RCC_OscConfig+0x12c>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d168      	bne.n	800199c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e24c      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x76>
 80018d8:	4b80      	ldr	r3, [pc, #512]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a7f      	ldr	r2, [pc, #508]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	e02e      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x98>
 80018ee:	4b7b      	ldr	r3, [pc, #492]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a7a      	ldr	r2, [pc, #488]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b78      	ldr	r3, [pc, #480]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a77      	ldr	r2, [pc, #476]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e01d      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0xbc>
 8001912:	4b72      	ldr	r3, [pc, #456]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a71      	ldr	r2, [pc, #452]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b6f      	ldr	r3, [pc, #444]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a6e      	ldr	r2, [pc, #440]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0xd4>
 800192c:	4b6b      	ldr	r3, [pc, #428]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a6a      	ldr	r2, [pc, #424]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a67      	ldr	r2, [pc, #412]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 800193e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7fe ff1a 	bl	8000784 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7fe ff16 	bl	8000784 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e200      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b5d      	ldr	r3, [pc, #372]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0xe4>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7fe ff06 	bl	8000784 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7fe ff02 	bl	8000784 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1ec      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x10c>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d063      	beq.n	8001a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019aa:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d11c      	bne.n	80019fc <HAL_RCC_OscConfig+0x18c>
 80019c2:	4b46      	ldr	r3, [pc, #280]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d116      	bne.n	80019fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	4b43      	ldr	r3, [pc, #268]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_RCC_OscConfig+0x176>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e1c0      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4939      	ldr	r1, [pc, #228]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	e03a      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7fe febb 	bl	8000784 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7fe feb7 	bl	8000784 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1a1      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	4b2d      	ldr	r3, [pc, #180]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4927      	ldr	r1, [pc, #156]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7fe fe9a 	bl	8000784 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a54:	f7fe fe96 	bl	8000784 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e180      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d03a      	beq.n	8001af4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d019      	beq.n	8001aba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7fe fe7a 	bl	8000784 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a94:	f7fe fe76 	bl	8000784 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e160      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f000 face 	bl	8002054 <RCC_Delay>
 8001ab8:	e01c      	b.n	8001af4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_RCC_OscConfig+0x274>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7fe fe60 	bl	8000784 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac6:	e00f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7fe fe5c 	bl	8000784 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d908      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e146      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	42420000 	.word	0x42420000
 8001ae4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b92      	ldr	r3, [pc, #584]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e9      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a6 	beq.w	8001c4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b8b      	ldr	r3, [pc, #556]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10d      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b88      	ldr	r3, [pc, #544]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4a87      	ldr	r2, [pc, #540]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	61d3      	str	r3, [r2, #28]
 8001b1e:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b82      	ldr	r3, [pc, #520]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7e      	ldr	r2, [pc, #504]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7fe fe1d 	bl	8000784 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7fe fe19 	bl	8000784 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	; 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e103      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x4c8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x312>
 8001b74:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4a6e      	ldr	r2, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	e02d      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x334>
 8001b8a:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a69      	ldr	r2, [pc, #420]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6213      	str	r3, [r2, #32]
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a66      	ldr	r2, [pc, #408]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	e01c      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x356>
 8001bac:	4b61      	ldr	r3, [pc, #388]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a60      	ldr	r2, [pc, #384]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a5d      	ldr	r2, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0x36e>
 8001bc6:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a5a      	ldr	r2, [pc, #360]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6213      	str	r3, [r2, #32]
 8001bd2:	4b58      	ldr	r3, [pc, #352]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a57      	ldr	r2, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	f023 0304 	bic.w	r3, r3, #4
 8001bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d015      	beq.n	8001c12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7fe fdcd 	bl	8000784 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7fe fdc9 	bl	8000784 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0b1      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	4b4b      	ldr	r3, [pc, #300]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ee      	beq.n	8001bee <HAL_RCC_OscConfig+0x37e>
 8001c10:	e014      	b.n	8001c3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7fe fdb7 	bl	8000784 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7fe fdb3 	bl	8000784 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e09b      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c42:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a3b      	ldr	r2, [pc, #236]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8087 	beq.w	8001d66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c58:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d061      	beq.n	8001d28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d146      	bne.n	8001cfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7fe fd87 	bl	8000784 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7fe fd83 	bl	8000784 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e06d      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d108      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	4921      	ldr	r1, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a19      	ldr	r1, [r3, #32]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	491b      	ldr	r1, [pc, #108]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7fe fd57 	bl	8000784 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7fe fd53 	bl	8000784 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e03d      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x46a>
 8001cf8:	e035      	b.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7fe fd40 	bl	8000784 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7fe fd3c 	bl	8000784 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e026      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x498>
 8001d26:	e01e      	b.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e019      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_OscConfig+0x500>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d106      	bne.n	8001d62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0d0      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4965      	ldr	r1, [pc, #404]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0b8      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001df2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	494d      	ldr	r1, [pc, #308]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d040      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e073      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06b      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4936      	ldr	r1, [pc, #216]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e64:	f7fe fc8e 	bl	8000784 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7fe fc8a 	bl	8000784 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e053      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d210      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0207 	bic.w	r2, r3, #7
 8001eaa:	4922      	ldr	r1, [pc, #136]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e032      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4916      	ldr	r1, [pc, #88]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	490e      	ldr	r1, [pc, #56]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f02:	f000 f821 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	490a      	ldr	r1, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	5ccb      	ldrb	r3, [r1, r3]
 8001f16:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1cc>)
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fbec 	bl	8000700 <HAL_InitTick>

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08002b70 	.word	0x08002b70
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000004 	.word	0x20000004

08001f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d002      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x30>
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x36>
 8001f76:	e027      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7a:	613b      	str	r3, [r7, #16]
      break;
 8001f7c:	e027      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d010      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	0c5b      	lsrs	r3, r3, #17
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001faa:	fb03 f202 	mul.w	r2, r3, r2
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e004      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	613b      	str	r3, [r7, #16]
      break;
 8001fc6:	e002      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fca:	613b      	str	r3, [r7, #16]
      break;
 8001fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fce:	693b      	ldr	r3, [r7, #16]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	007a1200 	.word	0x007a1200
 8001fe4:	08002b88 	.word	0x08002b88
 8001fe8:	08002b98 	.word	0x08002b98
 8001fec:	003d0900 	.word	0x003d0900

08001ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	20000000 	.word	0x20000000

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002008:	f7ff fff2 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4903      	ldr	r1, [pc, #12]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40021000 	.word	0x40021000
 8002028:	08002b80 	.word	0x08002b80

0800202c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002030:	f7ff ffde 	bl	8001ff0 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	0adb      	lsrs	r3, r3, #11
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	08002b80 	.word	0x08002b80

08002054 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <RCC_Delay+0x34>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <RCC_Delay+0x38>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0a5b      	lsrs	r3, r3, #9
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002070:	bf00      	nop
  }
  while (Delay --);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	60fa      	str	r2, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f9      	bne.n	8002070 <RCC_Delay+0x1c>
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	20000000 	.word	0x20000000
 800208c:	10624dd3 	.word	0x10624dd3

08002090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e042      	b.n	8002128 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fa50 	bl	800055c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2224      	movs	r2, #36	; 0x24
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fc7f 	bl	80029d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b0ba      	sub	sp, #232	; 0xe8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800216e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_UART_IRQHandler+0x66>
 8002182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fb63 	bl	800285a <UART_Receive_IT>
      return;
 8002194:	e25b      	b.n	800264e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80de 	beq.w	800235c <HAL_UART_IRQHandler+0x22c>
 80021a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d106      	bne.n	80021ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80d1 	beq.w	800235c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_UART_IRQHandler+0xae>
 80021c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <HAL_UART_IRQHandler+0xd2>
 80021ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f043 0202 	orr.w	r2, r3, #2
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00b      	beq.n	8002226 <HAL_UART_IRQHandler+0xf6>
 800220e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f043 0204 	orr.w	r2, r3, #4
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d011      	beq.n	8002256 <HAL_UART_IRQHandler+0x126>
 8002232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800223e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f043 0208 	orr.w	r2, r3, #8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 81f2 	beq.w	8002644 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_UART_IRQHandler+0x14e>
 800226c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 faee 	bl	800285a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d103      	bne.n	80022aa <HAL_UART_IRQHandler+0x17a>
 80022a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d04f      	beq.n	800234a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f9f8 	bl	80026a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d041      	beq.n	8002342 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3314      	adds	r3, #20
 80022c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80022d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3314      	adds	r3, #20
 80022e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80022ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80022ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80022f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80022fa:	e841 2300 	strex	r3, r2, [r1]
 80022fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1d9      	bne.n	80022be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d013      	beq.n	800233a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002316:	4a7e      	ldr	r2, [pc, #504]	; (8002510 <HAL_UART_IRQHandler+0x3e0>)
 8002318:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f890 	bl	8001444 <HAL_DMA_Abort_IT>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d016      	beq.n	8002358 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002334:	4610      	mov	r0, r2
 8002336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002338:	e00e      	b.n	8002358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f99c 	bl	8002678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002340:	e00a      	b.n	8002358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f998 	bl	8002678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002348:	e006      	b.n	8002358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f994 	bl	8002678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002356:	e175      	b.n	8002644 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	bf00      	nop
    return;
 800235a:	e173      	b.n	8002644 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	2b01      	cmp	r3, #1
 8002362:	f040 814f 	bne.w	8002604 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8148 	beq.w	8002604 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8141 	beq.w	8002604 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80b6 	beq.w	8002514 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8145 	beq.w	8002648 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023c6:	429a      	cmp	r2, r3
 80023c8:	f080 813e 	bcs.w	8002648 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b20      	cmp	r3, #32
 80023dc:	f000 8088 	beq.w	80024f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	330c      	adds	r3, #12
 80023e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023ee:	e853 3f00 	ldrex	r3, [r3]
 80023f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80023f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	330c      	adds	r3, #12
 8002408:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800240c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002414:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002418:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800241c:	e841 2300 	strex	r3, r2, [r1]
 8002420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002424:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1d9      	bne.n	80023e0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3314      	adds	r3, #20
 8002432:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002436:	e853 3f00 	ldrex	r3, [r3]
 800243a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800243c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3314      	adds	r3, #20
 800244c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002450:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002454:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002456:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002458:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800245c:	e841 2300 	strex	r3, r2, [r1]
 8002460:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e1      	bne.n	800242c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3314      	adds	r3, #20
 800246e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002472:	e853 3f00 	ldrex	r3, [r3]
 8002476:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800247a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800247e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3314      	adds	r3, #20
 8002488:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800248c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800248e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002490:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002492:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002494:	e841 2300 	strex	r3, r2, [r1]
 8002498:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800249a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e3      	bne.n	8002468 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b8:	e853 3f00 	ldrex	r3, [r3]
 80024bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80024be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c0:	f023 0310 	bic.w	r3, r3, #16
 80024c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80024d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80024d4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024da:	e841 2300 	strex	r3, r2, [r1]
 80024de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80024e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1e3      	bne.n	80024ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe ff6f 	bl	80013ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024fe:	b29b      	uxth	r3, r3
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	b29b      	uxth	r3, r3
 8002504:	4619      	mov	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f8bf 	bl	800268a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800250c:	e09c      	b.n	8002648 <HAL_UART_IRQHandler+0x518>
 800250e:	bf00      	nop
 8002510:	08002765 	.word	0x08002765
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800251c:	b29b      	uxth	r3, r3
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 808e 	beq.w	800264c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8089 	beq.w	800264c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	e853 3f00 	ldrex	r3, [r3]
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800254a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	330c      	adds	r3, #12
 800255a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800255e:	647a      	str	r2, [r7, #68]	; 0x44
 8002560:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002566:	e841 2300 	strex	r3, r2, [r1]
 800256a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800256c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e3      	bne.n	800253a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3314      	adds	r3, #20
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	e853 3f00 	ldrex	r3, [r3]
 8002580:	623b      	str	r3, [r7, #32]
   return(result);
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3314      	adds	r3, #20
 8002592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002596:	633a      	str	r2, [r7, #48]	; 0x30
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800259c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800259e:	e841 2300 	strex	r3, r2, [r1]
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1e3      	bne.n	8002572 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	330c      	adds	r3, #12
 80025be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	e853 3f00 	ldrex	r3, [r3]
 80025c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 0310 	bic.w	r3, r3, #16
 80025ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	330c      	adds	r3, #12
 80025d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80025dc:	61fa      	str	r2, [r7, #28]
 80025de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e0:	69b9      	ldr	r1, [r7, #24]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	e841 2300 	strex	r3, r2, [r1]
 80025e8:	617b      	str	r3, [r7, #20]
   return(result);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e3      	bne.n	80025b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f844 	bl	800268a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002602:	e023      	b.n	800264c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <HAL_UART_IRQHandler+0x4f4>
 8002610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f8b5 	bl	800278c <UART_Transmit_IT>
    return;
 8002622:	e014      	b.n	800264e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00e      	beq.n	800264e <HAL_UART_IRQHandler+0x51e>
 8002630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f8f4 	bl	800282a <UART_EndTransmit_IT>
    return;
 8002642:	e004      	b.n	800264e <HAL_UART_IRQHandler+0x51e>
    return;
 8002644:	bf00      	nop
 8002646:	e002      	b.n	800264e <HAL_UART_IRQHandler+0x51e>
      return;
 8002648:	bf00      	nop
 800264a:	e000      	b.n	800264e <HAL_UART_IRQHandler+0x51e>
      return;
 800264c:	bf00      	nop
  }
}
 800264e:	37e8      	adds	r7, #232	; 0xe8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b095      	sub	sp, #84	; 0x54
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	330c      	adds	r3, #12
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b2:	e853 3f00 	ldrex	r3, [r3]
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	330c      	adds	r3, #12
 80026c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026c8:	643a      	str	r2, [r7, #64]	; 0x40
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80026ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026d0:	e841 2300 	strex	r3, r2, [r1]
 80026d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e5      	bne.n	80026a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3314      	adds	r3, #20
 80026e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	e853 3f00 	ldrex	r3, [r3]
 80026ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3314      	adds	r3, #20
 80026fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002704:	e841 2300 	strex	r3, r2, [r1]
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e5      	bne.n	80026dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	2b01      	cmp	r3, #1
 8002716:	d119      	bne.n	800274c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	330c      	adds	r3, #12
 800271e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	e853 3f00 	ldrex	r3, [r3]
 8002726:	60bb      	str	r3, [r7, #8]
   return(result);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f023 0310 	bic.w	r3, r3, #16
 800272e:	647b      	str	r3, [r7, #68]	; 0x44
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	330c      	adds	r3, #12
 8002736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002738:	61ba      	str	r2, [r7, #24]
 800273a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273c:	6979      	ldr	r1, [r7, #20]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	e841 2300 	strex	r3, r2, [r1]
 8002744:	613b      	str	r3, [r7, #16]
   return(result);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e5      	bne.n	8002718 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
}
 800275a:	bf00      	nop
 800275c:	3754      	adds	r7, #84	; 0x54
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7ff ff7a 	bl	8002678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b21      	cmp	r3, #33	; 0x21
 800279e:	d13e      	bne.n	800281e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a8:	d114      	bne.n	80027d4 <UART_Transmit_IT+0x48>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d110      	bne.n	80027d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	1c9a      	adds	r2, r3, #2
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	621a      	str	r2, [r3, #32]
 80027d2:	e008      	b.n	80027e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6211      	str	r1, [r2, #32]
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	4619      	mov	r1, r3
 80027f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002808:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002818:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002840:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ff02 	bl	8002654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b08c      	sub	sp, #48	; 0x30
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b22      	cmp	r3, #34	; 0x22
 800286c:	f040 80ae 	bne.w	80029cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002878:	d117      	bne.n	80028aa <UART_Receive_IT+0x50>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002882:	2300      	movs	r3, #0
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	b29b      	uxth	r3, r3
 8002894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002898:	b29a      	uxth	r2, r3
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	1c9a      	adds	r2, r3, #2
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
 80028a8:	e026      	b.n	80028f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028bc:	d007      	beq.n	80028ce <UART_Receive_IT+0x74>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10a      	bne.n	80028dc <UART_Receive_IT+0x82>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e008      	b.n	80028ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29b      	uxth	r3, r3
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4619      	mov	r1, r3
 8002906:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002908:	2b00      	cmp	r3, #0
 800290a:	d15d      	bne.n	80029c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0220 	bic.w	r2, r2, #32
 800291a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800292a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	2b01      	cmp	r3, #1
 8002950:	d135      	bne.n	80029be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	330c      	adds	r3, #12
 800295e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	e853 3f00 	ldrex	r3, [r3]
 8002966:	613b      	str	r3, [r7, #16]
   return(result);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f023 0310 	bic.w	r3, r3, #16
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002978:	623a      	str	r2, [r7, #32]
 800297a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297c:	69f9      	ldr	r1, [r7, #28]
 800297e:	6a3a      	ldr	r2, [r7, #32]
 8002980:	e841 2300 	strex	r3, r2, [r1]
 8002984:	61bb      	str	r3, [r7, #24]
   return(result);
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e5      	bne.n	8002958 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b10      	cmp	r3, #16
 8002998:	d10a      	bne.n	80029b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029b4:	4619      	mov	r1, r3
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fe67 	bl	800268a <HAL_UARTEx_RxEventCallback>
 80029bc:	e002      	b.n	80029c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff fe51 	bl	8002666 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e002      	b.n	80029ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e000      	b.n	80029ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3730      	adds	r7, #48	; 0x30
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a12:	f023 030c 	bic.w	r3, r3, #12
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a2c      	ldr	r2, [pc, #176]	; (8002aec <UART_SetConfig+0x114>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d103      	bne.n	8002a48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a40:	f7ff faf4 	bl	800202c <HAL_RCC_GetPCLK2Freq>
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	e002      	b.n	8002a4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a48:	f7ff fadc 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
 8002a4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009a      	lsls	r2, r3, #2
 8002a58:	441a      	add	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <UART_SetConfig+0x118>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	0119      	lsls	r1, r3, #4
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <UART_SetConfig+0x118>)
 8002a86:	fba3 0302 	umull	r0, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2064      	movs	r0, #100	; 0x64
 8002a8e:	fb00 f303 	mul.w	r3, r0, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	3332      	adds	r3, #50	; 0x32
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <UART_SetConfig+0x118>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa4:	4419      	add	r1, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <UART_SetConfig+0x118>)
 8002abe:	fba3 0302 	umull	r0, r3, r3, r2
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2064      	movs	r0, #100	; 0x64
 8002ac6:	fb00 f303 	mul.w	r3, r0, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	3332      	adds	r3, #50	; 0x32
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <UART_SetConfig+0x118>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	f003 020f 	and.w	r2, r3, #15
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	440a      	add	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40013800 	.word	0x40013800
 8002af0:	51eb851f 	.word	0x51eb851f

08002af4 <memset>:
 8002af4:	4603      	mov	r3, r0
 8002af6:	4402      	add	r2, r0
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d100      	bne.n	8002afe <memset+0xa>
 8002afc:	4770      	bx	lr
 8002afe:	f803 1b01 	strb.w	r1, [r3], #1
 8002b02:	e7f9      	b.n	8002af8 <memset+0x4>

08002b04 <__libc_init_array>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	2600      	movs	r6, #0
 8002b08:	4d0c      	ldr	r5, [pc, #48]	; (8002b3c <__libc_init_array+0x38>)
 8002b0a:	4c0d      	ldr	r4, [pc, #52]	; (8002b40 <__libc_init_array+0x3c>)
 8002b0c:	1b64      	subs	r4, r4, r5
 8002b0e:	10a4      	asrs	r4, r4, #2
 8002b10:	42a6      	cmp	r6, r4
 8002b12:	d109      	bne.n	8002b28 <__libc_init_array+0x24>
 8002b14:	f000 f81a 	bl	8002b4c <_init>
 8002b18:	2600      	movs	r6, #0
 8002b1a:	4d0a      	ldr	r5, [pc, #40]	; (8002b44 <__libc_init_array+0x40>)
 8002b1c:	4c0a      	ldr	r4, [pc, #40]	; (8002b48 <__libc_init_array+0x44>)
 8002b1e:	1b64      	subs	r4, r4, r5
 8002b20:	10a4      	asrs	r4, r4, #2
 8002b22:	42a6      	cmp	r6, r4
 8002b24:	d105      	bne.n	8002b32 <__libc_init_array+0x2e>
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2c:	4798      	blx	r3
 8002b2e:	3601      	adds	r6, #1
 8002b30:	e7ee      	b.n	8002b10 <__libc_init_array+0xc>
 8002b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b36:	4798      	blx	r3
 8002b38:	3601      	adds	r6, #1
 8002b3a:	e7f2      	b.n	8002b22 <__libc_init_array+0x1e>
 8002b3c:	08002b9c 	.word	0x08002b9c
 8002b40:	08002b9c 	.word	0x08002b9c
 8002b44:	08002b9c 	.word	0x08002b9c
 8002b48:	08002ba0 	.word	0x08002ba0

08002b4c <_init>:
 8002b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4e:	bf00      	nop
 8002b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b52:	bc08      	pop	{r3}
 8002b54:	469e      	mov	lr, r3
 8002b56:	4770      	bx	lr

08002b58 <_fini>:
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5a:	bf00      	nop
 8002b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5e:	bc08      	pop	{r3}
 8002b60:	469e      	mov	lr, r3
 8002b62:	4770      	bx	lr
